=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package KnetikCloud::PaymentsWalletsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use KnetikCloud::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'KnetikCloud::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = KnetikCloud::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_user_wallet
#
# Returns the user's wallet for the given currency code
# 
# @param int $user_id The ID of the user for whom wallet is being retrieved (required)
# @param string $currency_code Currency code of the user&#39;s wallet (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The ID of the user for whom wallet is being retrieved',
        required => '1',
    },
    'currency_code' => {
        data_type => 'string',
        description => 'Currency code of the user&#39;s wallet',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_wallet' } = { 
    	summary => 'Returns the user&#39;s wallet for the given currency code',
        params => $params,
        returns => 'SimpleWallet',
        };
}
# @return SimpleWallet
#
sub get_user_wallet {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_wallet");
    }

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling get_user_wallet");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/wallets/{currency_code}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SimpleWallet', $response);
    return $_response_object;
}

#
# get_user_wallet_transactions
#
# Retrieve a user's wallet transactions
# 
# @param int $user_id The ID of the user for whom wallet transactions are being retrieved (required)
# @param string $currency_code Currency code of the user&#39;s wallet (required)
# @param string $filter_type Filter for transactions with specified type (optional)
# @param int $filter_max_date Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
# @param int $filter_min_date Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
# @param string $filter_sign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The ID of the user for whom wallet transactions are being retrieved',
        required => '1',
    },
    'currency_code' => {
        data_type => 'string',
        description => 'Currency code of the user&#39;s wallet',
        required => '1',
    },
    'filter_type' => {
        data_type => 'string',
        description => 'Filter for transactions with specified type',
        required => '0',
    },
    'filter_max_date' => {
        data_type => 'int',
        description => 'Filter for transactions from no earlier than the specified date as a unix timestamp in seconds',
        required => '0',
    },
    'filter_min_date' => {
        data_type => 'int',
        description => 'Filter for transactions from no later than the specified date as a unix timestamp in seconds',
        required => '0',
    },
    'filter_sign' => {
        data_type => 'string',
        description => 'Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;)',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_wallet_transactions' } = { 
    	summary => 'Retrieve a user&#39;s wallet transactions',
        params => $params,
        returns => 'PageResourceWalletTransactionResource',
        };
}
# @return PageResourceWalletTransactionResource
#
sub get_user_wallet_transactions {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_wallet_transactions");
    }

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling get_user_wallet_transactions");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/wallets/{currency_code}/transactions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_type'}) {
        $query_params->{'filter_type'} = $self->{api_client}->to_query_value($args{'filter_type'});
    }

    # query params
    if ( exists $args{'filter_max_date'}) {
        $query_params->{'filter_max_date'} = $self->{api_client}->to_query_value($args{'filter_max_date'});
    }

    # query params
    if ( exists $args{'filter_min_date'}) {
        $query_params->{'filter_min_date'} = $self->{api_client}->to_query_value($args{'filter_min_date'});
    }

    # query params
    if ( exists $args{'filter_sign'}) {
        $query_params->{'filter_sign'} = $self->{api_client}->to_query_value($args{'filter_sign'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceWalletTransactionResource', $response);
    return $_response_object;
}

#
# get_user_wallets
#
# List all of a user's wallets
# 
# @param int $user_id The ID of the user for whom wallets are being retrieved (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The ID of the user for whom wallets are being retrieved',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_wallets' } = { 
    	summary => 'List all of a user&#39;s wallets',
        params => $params,
        returns => 'ARRAY[SimpleWallet]',
        };
}
# @return ARRAY[SimpleWallet]
#
sub get_user_wallets {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_wallets");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/wallets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SimpleWallet]', $response);
    return $_response_object;
}

#
# get_wallet_balances
#
# Retrieves a summation of wallet balances by currency code
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_wallet_balances' } = { 
    	summary => 'Retrieves a summation of wallet balances by currency code',
        params => $params,
        returns => 'PageResourceWalletTotalResponse',
        };
}
# @return PageResourceWalletTotalResponse
#
sub get_wallet_balances {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/wallets/totals';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceWalletTotalResponse', $response);
    return $_response_object;
}

#
# get_wallet_transactions
#
# Retrieve wallet transactions across the system
# 
# @param int $filter_invoice Filter for transactions from a specific invoice (optional)
# @param string $filter_type Filter for transactions with specified type (optional)
# @param string $filter_date A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
# @param string $filter_sign Filter for transactions with amount with the given sign (optional)
# @param int $filter_user_id Filter for transactions for specific userId (optional)
# @param string $filter_username Filter for transactions for specific username that start with the given string (optional)
# @param string $filter_details Filter for transactions for specific details that start with the given string (optional)
# @param string $filter_currency_code Filter for transactions for specific currency code (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
{
    my $params = {
    'filter_invoice' => {
        data_type => 'int',
        description => 'Filter for transactions from a specific invoice',
        required => '0',
    },
    'filter_type' => {
        data_type => 'string',
        description => 'Filter for transactions with specified type',
        required => '0',
    },
    'filter_date' => {
        data_type => 'string',
        description => 'A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).',
        required => '0',
    },
    'filter_sign' => {
        data_type => 'string',
        description => 'Filter for transactions with amount with the given sign',
        required => '0',
    },
    'filter_user_id' => {
        data_type => 'int',
        description => 'Filter for transactions for specific userId',
        required => '0',
    },
    'filter_username' => {
        data_type => 'string',
        description => 'Filter for transactions for specific username that start with the given string',
        required => '0',
    },
    'filter_details' => {
        data_type => 'string',
        description => 'Filter for transactions for specific details that start with the given string',
        required => '0',
    },
    'filter_currency_code' => {
        data_type => 'string',
        description => 'Filter for transactions for specific currency code',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_wallet_transactions' } = { 
    	summary => 'Retrieve wallet transactions across the system',
        params => $params,
        returns => 'PageResourceWalletTransactionResource',
        };
}
# @return PageResourceWalletTransactionResource
#
sub get_wallet_transactions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/wallets/transactions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_invoice'}) {
        $query_params->{'filter_invoice'} = $self->{api_client}->to_query_value($args{'filter_invoice'});
    }

    # query params
    if ( exists $args{'filter_type'}) {
        $query_params->{'filter_type'} = $self->{api_client}->to_query_value($args{'filter_type'});
    }

    # query params
    if ( exists $args{'filter_date'}) {
        $query_params->{'filter_date'} = $self->{api_client}->to_query_value($args{'filter_date'});
    }

    # query params
    if ( exists $args{'filter_sign'}) {
        $query_params->{'filter_sign'} = $self->{api_client}->to_query_value($args{'filter_sign'});
    }

    # query params
    if ( exists $args{'filter_user_id'}) {
        $query_params->{'filter_user_id'} = $self->{api_client}->to_query_value($args{'filter_user_id'});
    }

    # query params
    if ( exists $args{'filter_username'}) {
        $query_params->{'filter_username'} = $self->{api_client}->to_query_value($args{'filter_username'});
    }

    # query params
    if ( exists $args{'filter_details'}) {
        $query_params->{'filter_details'} = $self->{api_client}->to_query_value($args{'filter_details'});
    }

    # query params
    if ( exists $args{'filter_currency_code'}) {
        $query_params->{'filter_currency_code'} = $self->{api_client}->to_query_value($args{'filter_currency_code'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceWalletTransactionResource', $response);
    return $_response_object;
}

#
# get_wallets
#
# Retrieve a list of wallets across the system
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_wallets' } = { 
    	summary => 'Retrieve a list of wallets across the system',
        params => $params,
        returns => 'PageResourceSimpleWallet',
        };
}
# @return PageResourceSimpleWallet
#
sub get_wallets {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/wallets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceSimpleWallet', $response);
    return $_response_object;
}

#
# update_wallet_balance
#
# Updates the balance for a user's wallet
# 
# @param int $user_id The ID of the user for whom wallet is being modified (required)
# @param string $currency_code Currency code of the user&#39;s wallet (required)
# @param WalletAlterRequest $request The requested balance modification to be made to the user&#39;s wallet (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The ID of the user for whom wallet is being modified',
        required => '1',
    },
    'currency_code' => {
        data_type => 'string',
        description => 'Currency code of the user&#39;s wallet',
        required => '1',
    },
    'request' => {
        data_type => 'WalletAlterRequest',
        description => 'The requested balance modification to be made to the user&#39;s wallet',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_wallet_balance' } = { 
    	summary => 'Updates the balance for a user&#39;s wallet',
        params => $params,
        returns => 'WalletTransactionResource',
        };
}
# @return WalletTransactionResource
#
sub update_wallet_balance {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling update_wallet_balance");
    }

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling update_wallet_balance");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/wallets/{currency_code}/balance';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request'}) {
        $_body_data = $args{'request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WalletTransactionResource', $response);
    return $_response_object;
}

1;
