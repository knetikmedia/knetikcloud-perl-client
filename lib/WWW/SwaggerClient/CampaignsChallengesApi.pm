=begin comment

Knetik Platform API Documentation Latest

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: Latest
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::CampaignsChallengesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_challenge_activity_using_post
#
# Create a challenge activity
# 
# @param int $challenge_id The challenge id (required)
# @param ChallengeActivityResource $challenge_activity_resource The challenge activity resource object (optional)
# @param boolean $validate_settings Whether to validate the settings being sent against the available settings on the base activity. (optional, default to false)
{
    my $params = {
    'challenge_id' => {
        data_type => 'int',
        description => 'The challenge id',
        required => '1',
    },
    'challenge_activity_resource' => {
        data_type => 'ChallengeActivityResource',
        description => 'The challenge activity resource object',
        required => '0',
    },
    'validate_settings' => {
        data_type => 'boolean',
        description => 'Whether to validate the settings being sent against the available settings on the base activity.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_challenge_activity_using_post' } = { 
    	summary => 'Create a challenge activity',
        params => $params,
        returns => 'ChallengeActivityResource',
        };
}
# @return ChallengeActivityResource
#
sub create_challenge_activity_using_post {
    my ($self, %args) = @_;

    # verify the required parameter 'challenge_id' is set
    unless (exists $args{'challenge_id'}) {
      croak("Missing the required parameter 'challenge_id' when calling create_challenge_activity_using_post");
    }

    # parse inputs
    my $_resource_path = '/challenges/{challenge_id}/activities';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'validate_settings'}) {
        $query_params->{'validateSettings'} = $self->{api_client}->to_query_value($args{'validate_settings'});
    }

    # path params
    if ( exists $args{'challenge_id'}) {
        my $_base_variable = "{" . "challenge_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'challenge_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'challenge_activity_resource'}) {
        $_body_data = $args{'challenge_activity_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ChallengeActivityResource', $response);
    return $_response_object;
}

#
# create_challenge_template_using_post
#
# Create a challenge template
# 
# @param TemplateResource $challenge_template_resource The challenge template resource object (optional)
{
    my $params = {
    'challenge_template_resource' => {
        data_type => 'TemplateResource',
        description => 'The challenge template resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_challenge_template_using_post' } = { 
    	summary => 'Create a challenge template',
        params => $params,
        returns => 'TemplateResource',
        };
}
# @return TemplateResource
#
sub create_challenge_template_using_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/challenges/templates';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'challenge_template_resource'}) {
        $_body_data = $args{'challenge_template_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TemplateResource', $response);
    return $_response_object;
}

#
# create_challenge_using_post
#
# Create a challenge
# 
# @param ChallengeResource $challenge_resource The challenge resource object (optional)
{
    my $params = {
    'challenge_resource' => {
        data_type => 'ChallengeResource',
        description => 'The challenge resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_challenge_using_post' } = { 
    	summary => 'Create a challenge',
        params => $params,
        returns => 'ChallengeResource',
        };
}
# @return ChallengeResource
#
sub create_challenge_using_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/challenges';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'challenge_resource'}) {
        $_body_data = $args{'challenge_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ChallengeResource', $response);
    return $_response_object;
}

#
# delete_challenge_activity_using_delete
#
# Delete a challenge activity
# 
# @param int $activity_id The activity id (required)
# @param int $challenge_id The challenge id (required)
{
    my $params = {
    'activity_id' => {
        data_type => 'int',
        description => 'The activity id',
        required => '1',
    },
    'challenge_id' => {
        data_type => 'int',
        description => 'The challenge id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_challenge_activity_using_delete' } = { 
    	summary => 'Delete a challenge activity',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_challenge_activity_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'activity_id' is set
    unless (exists $args{'activity_id'}) {
      croak("Missing the required parameter 'activity_id' when calling delete_challenge_activity_using_delete");
    }

    # verify the required parameter 'challenge_id' is set
    unless (exists $args{'challenge_id'}) {
      croak("Missing the required parameter 'challenge_id' when calling delete_challenge_activity_using_delete");
    }

    # parse inputs
    my $_resource_path = '/challenges/{challenge_id}/activities/{activity_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'activity_id'}) {
        my $_base_variable = "{" . "activity_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'activity_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'challenge_id'}) {
        my $_base_variable = "{" . "challenge_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'challenge_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_challenge_event_using_delete
#
# Delete a challenge event
# 
# @param int $id The challenge event id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The challenge event id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_challenge_event_using_delete' } = { 
    	summary => 'Delete a challenge event',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_challenge_event_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_challenge_event_using_delete");
    }

    # parse inputs
    my $_resource_path = '/challenges/events/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_challenge_template_using_delete
#
# Delete a challenge template
# 
# @param string $id The id of the template (required)
# @param string $cascade The value needed to delete used templates (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    'cascade' => {
        data_type => 'string',
        description => 'The value needed to delete used templates',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_challenge_template_using_delete' } = { 
    	summary => 'Delete a challenge template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_challenge_template_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_challenge_template_using_delete");
    }

    # parse inputs
    my $_resource_path = '/challenges/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'cascade'}) {
        $query_params->{'cascade'} = $self->{api_client}->to_query_value($args{'cascade'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_challenge_using_delete
#
# Delete a challenge
# 
# @param int $id The challenge id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The challenge id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_challenge_using_delete' } = { 
    	summary => 'Delete a challenge',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_challenge_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_challenge_using_delete");
    }

    # parse inputs
    my $_resource_path = '/challenges/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_activities_using_get1
#
# List and search challenge activities
# 
# @param int $challenge_id The challenge id (required)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
{
    my $params = {
    'challenge_id' => {
        data_type => 'int',
        description => 'The challenge id',
        required => '1',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_activities_using_get1' } = { 
    	summary => 'List and search challenge activities',
        params => $params,
        returns => 'PageBareChallengeActivityResource',
        };
}
# @return PageBareChallengeActivityResource
#
sub get_activities_using_get1 {
    my ($self, %args) = @_;

    # verify the required parameter 'challenge_id' is set
    unless (exists $args{'challenge_id'}) {
      croak("Missing the required parameter 'challenge_id' when calling get_activities_using_get1");
    }

    # parse inputs
    my $_resource_path = '/challenges/{challenge_id}/activities';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    # path params
    if ( exists $args{'challenge_id'}) {
        my $_base_variable = "{" . "challenge_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'challenge_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageBareChallengeActivityResource', $response);
    return $_response_object;
}

#
# get_challenge_activity_using_get
#
# Get a single challenge activity
# 
# @param int $activity_id The activity id (required)
{
    my $params = {
    'activity_id' => {
        data_type => 'int',
        description => 'The activity id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenge_activity_using_get' } = { 
    	summary => 'Get a single challenge activity',
        params => $params,
        returns => 'ChallengeActivityResource',
        };
}
# @return ChallengeActivityResource
#
sub get_challenge_activity_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'activity_id' is set
    unless (exists $args{'activity_id'}) {
      croak("Missing the required parameter 'activity_id' when calling get_challenge_activity_using_get");
    }

    # parse inputs
    my $_resource_path = '/challenges/{challenge_id}/activities/{activity_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'activity_id'}) {
        my $_base_variable = "{" . "activity_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'activity_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ChallengeActivityResource', $response);
    return $_response_object;
}

#
# get_challenge_event_using_get
#
# Retrieve a single challenge event details
# 
# @param int $id The challenge event id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The challenge event id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenge_event_using_get' } = { 
    	summary => 'Retrieve a single challenge event details',
        params => $params,
        returns => 'ChallengeEventResource',
        };
}
# @return ChallengeEventResource
#
sub get_challenge_event_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_challenge_event_using_get");
    }

    # parse inputs
    my $_resource_path = '/challenges/events/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ChallengeEventResource', $response);
    return $_response_object;
}

#
# get_challenge_eventss_using_get
#
# Retrieve a list of challenge events
# 
# @param string $filter_start_date A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
# @param string $filter_end_date A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
# @param boolean $filter_campaigns check only for events from currently running campaigns (optional)
# @param int $filter_challenge check only for events from the challenge specified by id (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
{
    my $params = {
    'filter_start_date' => {
        data_type => 'string',
        description => 'A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).',
        required => '0',
    },
    'filter_end_date' => {
        data_type => 'string',
        description => 'A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).',
        required => '0',
    },
    'filter_campaigns' => {
        data_type => 'boolean',
        description => 'check only for events from currently running campaigns',
        required => '0',
    },
    'filter_challenge' => {
        data_type => 'int',
        description => 'check only for events from the challenge specified by id',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenge_eventss_using_get' } = { 
    	summary => 'Retrieve a list of challenge events',
        params => $params,
        returns => 'PageChallengeEventResource',
        };
}
# @return PageChallengeEventResource
#
sub get_challenge_eventss_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/challenges/events';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_start_date'}) {
        $query_params->{'filter_start_date'} = $self->{api_client}->to_query_value($args{'filter_start_date'});
    }

    # query params
    if ( exists $args{'filter_end_date'}) {
        $query_params->{'filter_end_date'} = $self->{api_client}->to_query_value($args{'filter_end_date'});
    }

    # query params
    if ( exists $args{'filter_campaigns'}) {
        $query_params->{'filter_campaigns'} = $self->{api_client}->to_query_value($args{'filter_campaigns'});
    }

    # query params
    if ( exists $args{'filter_challenge'}) {
        $query_params->{'filter_challenge'} = $self->{api_client}->to_query_value($args{'filter_challenge'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageChallengeEventResource', $response);
    return $_response_object;
}

#
# get_challenge_template_using_get
#
# Get a single challenge template
# 
# @param string $id The id of the template (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenge_template_using_get' } = { 
    	summary => 'Get a single challenge template',
        params => $params,
        returns => 'TemplateResource',
        };
}
# @return TemplateResource
#
sub get_challenge_template_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_challenge_template_using_get");
    }

    # parse inputs
    my $_resource_path = '/challenges/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TemplateResource', $response);
    return $_response_object;
}

#
# get_challenge_templates_using_get
#
# List and search challenge templates
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenge_templates_using_get' } = { 
    	summary => 'List and search challenge templates',
        params => $params,
        returns => 'PageTemplateResource',
        };
}
# @return PageTemplateResource
#
sub get_challenge_templates_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/challenges/templates';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageTemplateResource', $response);
    return $_response_object;
}

#
# get_challenge_using_get
#
# Retrieve a single challenge details
# 
# @param int $id The challenge id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The challenge id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenge_using_get' } = { 
    	summary => 'Retrieve a single challenge details',
        params => $params,
        returns => 'ChallengeResource',
        };
}
# @return ChallengeResource
#
sub get_challenge_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_challenge_using_get");
    }

    # parse inputs
    my $_resource_path = '/challenges/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ChallengeResource', $response);
    return $_response_object;
}

#
# get_challenges_using_get1
#
# Retrieve a list of challenges
# 
# @param boolean $filter_template Filter for challenges that are not tied to campaigns (templates) (optional)
# @param boolean $filter_active_campaign Filter for challenges that are tied to active campaigns (optional)
{
    my $params = {
    'filter_template' => {
        data_type => 'boolean',
        description => 'Filter for challenges that are not tied to campaigns (templates)',
        required => '0',
    },
    'filter_active_campaign' => {
        data_type => 'boolean',
        description => 'Filter for challenges that are tied to active campaigns',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenges_using_get1' } = { 
    	summary => 'Retrieve a list of challenges',
        params => $params,
        returns => 'PageChallengeResource',
        };
}
# @return PageChallengeResource
#
sub get_challenges_using_get1 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/challenges';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_template'}) {
        $query_params->{'filter_template'} = $self->{api_client}->to_query_value($args{'filter_template'});
    }

    # query params
    if ( exists $args{'filter_active_campaign'}) {
        $query_params->{'filter_active_campaign'} = $self->{api_client}->to_query_value($args{'filter_active_campaign'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageChallengeResource', $response);
    return $_response_object;
}

#
# update_challenge_activity_using_put
#
# Update a challenge activity
# 
# @param int $activity_id The activity id (required)
# @param int $challenge_id The challenge id (required)
# @param ChallengeActivityResource $challenge_activity_resource The challenge activity resource object (optional)
{
    my $params = {
    'activity_id' => {
        data_type => 'int',
        description => 'The activity id',
        required => '1',
    },
    'challenge_id' => {
        data_type => 'int',
        description => 'The challenge id',
        required => '1',
    },
    'challenge_activity_resource' => {
        data_type => 'ChallengeActivityResource',
        description => 'The challenge activity resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_challenge_activity_using_put' } = { 
    	summary => 'Update a challenge activity',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_challenge_activity_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'activity_id' is set
    unless (exists $args{'activity_id'}) {
      croak("Missing the required parameter 'activity_id' when calling update_challenge_activity_using_put");
    }

    # verify the required parameter 'challenge_id' is set
    unless (exists $args{'challenge_id'}) {
      croak("Missing the required parameter 'challenge_id' when calling update_challenge_activity_using_put");
    }

    # parse inputs
    my $_resource_path = '/challenges/{challenge_id}/activities/{activity_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'activity_id'}) {
        my $_base_variable = "{" . "activity_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'activity_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'challenge_id'}) {
        my $_base_variable = "{" . "challenge_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'challenge_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'challenge_activity_resource'}) {
        $_body_data = $args{'challenge_activity_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_challenge_template_using_put
#
# Update a challenge template
# 
# @param string $id The id of the template (required)
# @param TemplateResource $challenge_template_resource The challenge template resource object (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    'challenge_template_resource' => {
        data_type => 'TemplateResource',
        description => 'The challenge template resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_challenge_template_using_put' } = { 
    	summary => 'Update a challenge template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_challenge_template_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_challenge_template_using_put");
    }

    # parse inputs
    my $_resource_path = '/challenges/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'challenge_template_resource'}) {
        $_body_data = $args{'challenge_template_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_challenge_using_put
#
# Update a challenge's information
# 
# @param int $id The challenge id (required)
# @param ChallengeResource $challenge_resource The challenge resource object (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The challenge id',
        required => '1',
    },
    'challenge_resource' => {
        data_type => 'ChallengeResource',
        description => 'The challenge resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_challenge_using_put' } = { 
    	summary => 'Update a challenge&#39;s information',
        params => $params,
        returns => 'ChallengeResource',
        };
}
# @return ChallengeResource
#
sub update_challenge_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_challenge_using_put");
    }

    # parse inputs
    my $_resource_path = '/challenges/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'challenge_resource'}) {
        $_body_data = $args{'challenge_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ChallengeResource', $response);
    return $_response_object;
}

1;
