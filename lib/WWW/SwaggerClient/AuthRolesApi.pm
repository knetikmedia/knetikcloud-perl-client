=begin comment

Knetik Platform API Documentation Latest

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

OpenAPI spec version: Latest
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::AuthRolesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# assign_client_roles_using_put
#
# Set roles for a client
# 
# @param string $client_key The client key (required)
# @param ARRAY[string] $roles_list The list of unique roles (optional)
{
    my $params = {
    'client_key' => {
        data_type => 'string',
        description => 'The client key',
        required => '1',
    },
    'roles_list' => {
        data_type => 'ARRAY[string]',
        description => 'The list of unique roles',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'assign_client_roles_using_put' } = { 
    	summary => 'Set roles for a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub assign_client_roles_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'client_key' is set
    unless (exists $args{'client_key'}) {
      croak("Missing the required parameter 'client_key' when calling assign_client_roles_using_put");
    }

    # parse inputs
    my $_resource_path = '/auth/clients/{client_key}/roles';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'client_key'}) {
        my $_base_variable = "{" . "client_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'roles_list'}) {
        $_body_data = $args{'roles_list'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# assign_permissions_using_put
#
# Set permissions for a role
# 
# @param string $role The role value (required)
# @param ARRAY[string] $permissions_list The list of unique permissions (optional)
{
    my $params = {
    'role' => {
        data_type => 'string',
        description => 'The role value',
        required => '1',
    },
    'permissions_list' => {
        data_type => 'ARRAY[string]',
        description => 'The list of unique permissions',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'assign_permissions_using_put' } = { 
    	summary => 'Set permissions for a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub assign_permissions_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'role' is set
    unless (exists $args{'role'}) {
      croak("Missing the required parameter 'role' when calling assign_permissions_using_put");
    }

    # parse inputs
    my $_resource_path = '/auth/roles/{role}/permissions';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'role'}) {
        my $_base_variable = "{" . "role" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'permissions_list'}) {
        $_body_data = $args{'permissions_list'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# assign_user_roles_external_using_put
#
# Set roles for a user
# 
# @param int $user_id The user&#39;s id (required)
# @param ARRAY[string] $roles_list The list of unique roles (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The user&#39;s id',
        required => '1',
    },
    'roles_list' => {
        data_type => 'ARRAY[string]',
        description => 'The list of unique roles',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'assign_user_roles_external_using_put' } = { 
    	summary => 'Set roles for a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub assign_user_roles_external_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling assign_user_roles_external_using_put");
    }

    # parse inputs
    my $_resource_path = '/auth/users/{user_id}/roles';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'roles_list'}) {
        $_body_data = $args{'roles_list'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_role_using_post
#
# Create a new role
# 
# @param RoleResource $role_resource The role resource object (optional)
{
    my $params = {
    'role_resource' => {
        data_type => 'RoleResource',
        description => 'The role resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_role_using_post' } = { 
    	summary => 'Create a new role',
        params => $params,
        returns => 'RoleResource',
        };
}
# @return RoleResource
#
sub create_role_using_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/auth/roles';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'role_resource'}) {
        $_body_data = $args{'role_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RoleResource', $response);
    return $_response_object;
}

#
# delete_role_using_delete
#
# Delete a role
# 
# @param string $role The role value (required)
# @param boolean $force If true, removes role from users/clients (optional)
{
    my $params = {
    'role' => {
        data_type => 'string',
        description => 'The role value',
        required => '1',
    },
    'force' => {
        data_type => 'boolean',
        description => 'If true, removes role from users/clients',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_role_using_delete' } = { 
    	summary => 'Delete a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_role_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'role' is set
    unless (exists $args{'role'}) {
      croak("Missing the required parameter 'role' when calling delete_role_using_delete");
    }

    # parse inputs
    my $_resource_path = '/auth/roles/{role}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'force'}) {
        $query_params->{'force'} = $self->{api_client}->to_query_value($args{'force'});
    }

    # path params
    if ( exists $args{'role'}) {
        my $_base_variable = "{" . "role" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_client_roles_using_get
#
# Get roles for a client
# 
# @param string $client_key The client key (required)
{
    my $params = {
    'client_key' => {
        data_type => 'string',
        description => 'The client key',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_client_roles_using_get' } = { 
    	summary => 'Get roles for a client',
        params => $params,
        returns => 'ARRAY[RoleResource]',
        };
}
# @return ARRAY[RoleResource]
#
sub get_client_roles_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'client_key' is set
    unless (exists $args{'client_key'}) {
      croak("Missing the required parameter 'client_key' when calling get_client_roles_using_get");
    }

    # parse inputs
    my $_resource_path = '/auth/clients/{client_key}/roles';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'client_key'}) {
        my $_base_variable = "{" . "client_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[RoleResource]', $response);
    return $_response_object;
}

#
# get_role_using_get
#
# Get a single role
# 
# @param string $role The role value (required)
{
    my $params = {
    'role' => {
        data_type => 'string',
        description => 'The role value',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_role_using_get' } = { 
    	summary => 'Get a single role',
        params => $params,
        returns => 'RoleResource',
        };
}
# @return RoleResource
#
sub get_role_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'role' is set
    unless (exists $args{'role'}) {
      croak("Missing the required parameter 'role' when calling get_role_using_get");
    }

    # parse inputs
    my $_resource_path = '/auth/roles/{role}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'role'}) {
        my $_base_variable = "{" . "role" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RoleResource', $response);
    return $_response_object;
}

#
# get_roles_using_get
#
# List and search roles
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_roles_using_get' } = { 
    	summary => 'List and search roles',
        params => $params,
        returns => 'PageResourceRoleResource',
        };
}
# @return PageResourceRoleResource
#
sub get_roles_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/auth/roles';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceRoleResource', $response);
    return $_response_object;
}

#
# get_user_roles_using_get
#
# Get roles for a user
# 
# @param int $user_id The user&#39;s id (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The user&#39;s id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_roles_using_get' } = { 
    	summary => 'Get roles for a user',
        params => $params,
        returns => 'ARRAY[RoleResource]',
        };
}
# @return ARRAY[RoleResource]
#
sub get_user_roles_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_roles_using_get");
    }

    # parse inputs
    my $_resource_path = '/auth/users/{user_id}/roles';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[RoleResource]', $response);
    return $_response_object;
}

#
# update_role_using_put
#
# Update a role
# 
# @param string $role The role value (required)
# @param RoleResource $role_resource The role resource object (optional)
{
    my $params = {
    'role' => {
        data_type => 'string',
        description => 'The role value',
        required => '1',
    },
    'role_resource' => {
        data_type => 'RoleResource',
        description => 'The role resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_role_using_put' } = { 
    	summary => 'Update a role',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_role_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'role' is set
    unless (exists $args{'role'}) {
      croak("Missing the required parameter 'role' when calling update_role_using_put");
    }

    # parse inputs
    my $_resource_path = '/auth/roles/{role}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'role'}) {
        my $_base_variable = "{" . "role" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'role'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'role_resource'}) {
        $_body_data = $args{'role_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
