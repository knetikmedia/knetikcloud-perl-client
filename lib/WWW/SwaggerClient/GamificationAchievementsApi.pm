=begin comment

Knetik Platform API Documentation Latest

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: Latest
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::GamificationAchievementsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_achievement_using_post
#
# Create a new achievement definition
# 
# @param AchievementDefinitionResource $achievement The achievement definition (optional)
{
    my $params = {
    'achievement' => {
        data_type => 'AchievementDefinitionResource',
        description => 'The achievement definition',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_achievement_using_post' } = { 
    	summary => 'Create a new achievement definition',
        params => $params,
        returns => 'AchievementDefinitionResource',
        };
}
# @return AchievementDefinitionResource
#
sub create_achievement_using_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/achievements';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'achievement'}) {
        $_body_data = $args{'achievement'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AchievementDefinitionResource', $response);
    return $_response_object;
}

#
# create_template_using_post
#
# Create an achievement template
# 
# @param TemplateResource $template The achievement template to be created (optional)
{
    my $params = {
    'template' => {
        data_type => 'TemplateResource',
        description => 'The achievement template to be created',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_template_using_post' } = { 
    	summary => 'Create an achievement template',
        params => $params,
        returns => 'TemplateResource',
        };
}
# @return TemplateResource
#
sub create_template_using_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/achievements/templates';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'template'}) {
        $_body_data = $args{'template'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TemplateResource', $response);
    return $_response_object;
}

#
# delete_achievement_template_using_delete
#
# Delete an achievement template
# 
# @param string $id The id of the template (required)
# @param string $cascade The value needed to delete used templates (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    'cascade' => {
        data_type => 'string',
        description => 'The value needed to delete used templates',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_achievement_template_using_delete' } = { 
    	summary => 'Delete an achievement template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_achievement_template_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_achievement_template_using_delete");
    }

    # parse inputs
    my $_resource_path = '/achievements/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'cascade'}) {
        $query_params->{'cascade'} = $self->{api_client}->to_query_value($args{'cascade'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_achievement_using_delete
#
# Delete an achievement definition
# 
# @param string $name The name of the achievement (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The name of the achievement',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_achievement_using_delete' } = { 
    	summary => 'Delete an achievement definition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_achievement_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling delete_achievement_using_delete");
    }

    # parse inputs
    my $_resource_path = '/achievements/{name}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_achievement_template_using_get
#
# Get a single achievement template
# 
# @param string $id The id of the template (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_achievement_template_using_get' } = { 
    	summary => 'Get a single achievement template',
        params => $params,
        returns => 'TemplateResource',
        };
}
# @return TemplateResource
#
sub get_achievement_template_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_achievement_template_using_get");
    }

    # parse inputs
    my $_resource_path = '/achievements/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TemplateResource', $response);
    return $_response_object;
}

#
# get_achievement_templates_using_get
#
# List and search achievement templates
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_achievement_templates_using_get' } = { 
    	summary => 'List and search achievement templates',
        params => $params,
        returns => 'PageTemplateResource',
        };
}
# @return PageTemplateResource
#
sub get_achievement_templates_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/achievements/templates';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageTemplateResource', $response);
    return $_response_object;
}

#
# get_achievement_using_get
#
# Get a single achievement definition
# 
# @param string $name The name of the achievement (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The name of the achievement',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_achievement_using_get' } = { 
    	summary => 'Get a single achievement definition',
        params => $params,
        returns => 'AchievementDefinitionResource',
        };
}
# @return AchievementDefinitionResource
#
sub get_achievement_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_achievement_using_get");
    }

    # parse inputs
    my $_resource_path = '/achievements/{name}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AchievementDefinitionResource', $response);
    return $_response_object;
}

#
# get_achievements_using_get
#
# Get all achievement definitions in the system
# 
# @param string $filter_tagset Filter for achievements with specified tags (separated by comma) (optional)
# @param string $filter_name Filter for achievements whose name contains a string (optional)
# @param boolean $filter_hidden Filter for achievements that are hidden or not (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
{
    my $params = {
    'filter_tagset' => {
        data_type => 'string',
        description => 'Filter for achievements with specified tags (separated by comma)',
        required => '0',
    },
    'filter_name' => {
        data_type => 'string',
        description => 'Filter for achievements whose name contains a string',
        required => '0',
    },
    'filter_hidden' => {
        data_type => 'boolean',
        description => 'Filter for achievements that are hidden or not',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_achievements_using_get' } = { 
    	summary => 'Get all achievement definitions in the system',
        params => $params,
        returns => 'PageAchievementDefinitionResource',
        };
}
# @return PageAchievementDefinitionResource
#
sub get_achievements_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/achievements';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_tagset'}) {
        $query_params->{'filter_tagset'} = $self->{api_client}->to_query_value($args{'filter_tagset'});
    }

    # query params
    if ( exists $args{'filter_name'}) {
        $query_params->{'filter_name'} = $self->{api_client}->to_query_value($args{'filter_name'});
    }

    # query params
    if ( exists $args{'filter_hidden'}) {
        $query_params->{'filter_hidden'} = $self->{api_client}->to_query_value($args{'filter_hidden'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageAchievementDefinitionResource', $response);
    return $_response_object;
}

#
# get_all_user_progress_for_achievement_using_get
#
# Retrieve progress on a given achievement for all users
# 
# @param string $achievement_name The achievement&#39;s name (required)
# @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
# @param boolean $filter_achievement_hidden Filter for achievements that are hidden or not (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'achievement_name' => {
        data_type => 'string',
        description => 'The achievement&#39;s name',
        required => '1',
    },
    'filter_achievement_tagset' => {
        data_type => 'string',
        description => 'Filter for achievements with specified tags (separated by comma)',
        required => '0',
    },
    'filter_achievement_hidden' => {
        data_type => 'boolean',
        description => 'Filter for achievements that are hidden or not',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_user_progress_for_achievement_using_get' } = { 
    	summary => 'Retrieve progress on a given achievement for all users',
        params => $params,
        returns => 'PageUserAchievementResource',
        };
}
# @return PageUserAchievementResource
#
sub get_all_user_progress_for_achievement_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'achievement_name' is set
    unless (exists $args{'achievement_name'}) {
      croak("Missing the required parameter 'achievement_name' when calling get_all_user_progress_for_achievement_using_get");
    }

    # parse inputs
    my $_resource_path = '/users/achievements/{achievement_name}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_achievement_tagset'}) {
        $query_params->{'filter_achievement_tagset'} = $self->{api_client}->to_query_value($args{'filter_achievement_tagset'});
    }

    # query params
    if ( exists $args{'filter_achievement_hidden'}) {
        $query_params->{'filter_achievement_hidden'} = $self->{api_client}->to_query_value($args{'filter_achievement_hidden'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'achievement_name'}) {
        my $_base_variable = "{" . "achievement_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'achievement_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageUserAchievementResource', $response);
    return $_response_object;
}

#
# get_all_user_progress_using_get
#
# Retrieve progress on achievements for all users
# 
# @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
# @param string $filter_achievement_name Filter for achievements whose name contains a string (optional)
# @param boolean $filter_achievement_hidden Filter for achievements that are hidden or not (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'filter_achievement_tagset' => {
        data_type => 'string',
        description => 'Filter for achievements with specified tags (separated by comma)',
        required => '0',
    },
    'filter_achievement_name' => {
        data_type => 'string',
        description => 'Filter for achievements whose name contains a string',
        required => '0',
    },
    'filter_achievement_hidden' => {
        data_type => 'boolean',
        description => 'Filter for achievements that are hidden or not',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_user_progress_using_get' } = { 
    	summary => 'Retrieve progress on achievements for all users',
        params => $params,
        returns => 'PageUserAchievementResource',
        };
}
# @return PageUserAchievementResource
#
sub get_all_user_progress_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users/achievements';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_achievement_tagset'}) {
        $query_params->{'filter_achievement_tagset'} = $self->{api_client}->to_query_value($args{'filter_achievement_tagset'});
    }

    # query params
    if ( exists $args{'filter_achievement_name'}) {
        $query_params->{'filter_achievement_name'} = $self->{api_client}->to_query_value($args{'filter_achievement_name'});
    }

    # query params
    if ( exists $args{'filter_achievement_hidden'}) {
        $query_params->{'filter_achievement_hidden'} = $self->{api_client}->to_query_value($args{'filter_achievement_hidden'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageUserAchievementResource', $response);
    return $_response_object;
}

#
# get_available_triggers_using_get
#
# Get the list of triggers that can be used to trigger achievement progress update.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_available_triggers_using_get' } = { 
    	summary => 'Get the list of triggers that can be used to trigger achievement progress update.',
        params => $params,
        returns => 'ARRAY[BreTriggerResource]',
        };
}
# @return ARRAY[BreTriggerResource]
#
sub get_available_triggers_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/achievements/triggers';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[BreTriggerResource]', $response);
    return $_response_object;
}

#
# get_user_progress_for_achievement_using_get
#
# Retrieve progress on a given achievement for a given user
# 
# @param int $user_id The user&#39;s id (required)
# @param string $achievement_name The achievement&#39;s name (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The user&#39;s id',
        required => '1',
    },
    'achievement_name' => {
        data_type => 'string',
        description => 'The achievement&#39;s name',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_progress_for_achievement_using_get' } = { 
    	summary => 'Retrieve progress on a given achievement for a given user',
        params => $params,
        returns => 'UserAchievementResource',
        };
}
# @return UserAchievementResource
#
sub get_user_progress_for_achievement_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_progress_for_achievement_using_get");
    }

    # verify the required parameter 'achievement_name' is set
    unless (exists $args{'achievement_name'}) {
      croak("Missing the required parameter 'achievement_name' when calling get_user_progress_for_achievement_using_get");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/achievements/{achievement_name}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'achievement_name'}) {
        my $_base_variable = "{" . "achievement_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'achievement_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserAchievementResource', $response);
    return $_response_object;
}

#
# get_user_progress_using_get
#
# Retrieve progress on achievements for a given user
# 
# @param int $user_id The user&#39;s id (required)
# @param string $filter_achievement_tagset Filter for achievements with specified tags (separated by comma) (optional)
# @param string $filter_achievement_name Filter for achievements whose name contains a string (optional)
# @param boolean $filter_achievement_hidden Filter for achievements that are hidden or not (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The user&#39;s id',
        required => '1',
    },
    'filter_achievement_tagset' => {
        data_type => 'string',
        description => 'Filter for achievements with specified tags (separated by comma)',
        required => '0',
    },
    'filter_achievement_name' => {
        data_type => 'string',
        description => 'Filter for achievements whose name contains a string',
        required => '0',
    },
    'filter_achievement_hidden' => {
        data_type => 'boolean',
        description => 'Filter for achievements that are hidden or not',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_progress_using_get' } = { 
    	summary => 'Retrieve progress on achievements for a given user',
        params => $params,
        returns => 'PageUserAchievementResource',
        };
}
# @return PageUserAchievementResource
#
sub get_user_progress_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_progress_using_get");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/achievements';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_achievement_tagset'}) {
        $query_params->{'filter_achievement_tagset'} = $self->{api_client}->to_query_value($args{'filter_achievement_tagset'});
    }

    # query params
    if ( exists $args{'filter_achievement_name'}) {
        $query_params->{'filter_achievement_name'} = $self->{api_client}->to_query_value($args{'filter_achievement_name'});
    }

    # query params
    if ( exists $args{'filter_achievement_hidden'}) {
        $query_params->{'filter_achievement_hidden'} = $self->{api_client}->to_query_value($args{'filter_achievement_hidden'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageUserAchievementResource', $response);
    return $_response_object;
}

#
# update_achievement_using_put
#
# Update an achievement definition
# 
# @param string $name The name of the achievement (required)
# @param AchievementDefinitionResource $achievement The achievement definition (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The name of the achievement',
        required => '1',
    },
    'achievement' => {
        data_type => 'AchievementDefinitionResource',
        description => 'The achievement definition',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_achievement_using_put' } = { 
    	summary => 'Update an achievement definition',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_achievement_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling update_achievement_using_put");
    }

    # parse inputs
    my $_resource_path = '/achievements/{name}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'achievement'}) {
        $_body_data = $args{'achievement'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_progress_using_put
#
# Update or create an achievement progress record for a user
# 
# @param int $user_id The user&#39;s id (required)
# @param string $achievement_name The achievement&#39;s name (required)
# @param AchievementProgressUpdateRequest $request The progress update details (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The user&#39;s id',
        required => '1',
    },
    'achievement_name' => {
        data_type => 'string',
        description => 'The achievement&#39;s name',
        required => '1',
    },
    'request' => {
        data_type => 'AchievementProgressUpdateRequest',
        description => 'The progress update details',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_progress_using_put' } = { 
    	summary => 'Update or create an achievement progress record for a user',
        params => $params,
        returns => 'UserAchievementResource',
        };
}
# @return UserAchievementResource
#
sub update_progress_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling update_progress_using_put");
    }

    # verify the required parameter 'achievement_name' is set
    unless (exists $args{'achievement_name'}) {
      croak("Missing the required parameter 'achievement_name' when calling update_progress_using_put");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/achievements/{achievement_name}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'achievement_name'}) {
        my $_base_variable = "{" . "achievement_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'achievement_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request'}) {
        $_body_data = $args{'request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserAchievementResource', $response);
    return $_response_object;
}

#
# update_template_using_put
#
# Update an achievement template
# 
# @param string $id The id of the template (required)
# @param TemplateResource $template The updated template (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    'template' => {
        data_type => 'TemplateResource',
        description => 'The updated template',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_template_using_put' } = { 
    	summary => 'Update an achievement template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_template_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_template_using_put");
    }

    # parse inputs
    my $_resource_path = '/achievements/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'template'}) {
        $_body_data = $args{'template'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
