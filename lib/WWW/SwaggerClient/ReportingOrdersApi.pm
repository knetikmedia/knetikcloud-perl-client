=begin comment

Knetik Platform API Documentation Latest

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

OpenAPI spec version: Latest
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::ReportingOrdersApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_daily_invoices_using_get
#
# Retrieve invoice counts aggregated by time ranges
# 
# @param string $currency_code The code for a currency to get sales data for (required)
# @param string $granularity The time duration to aggregate by (optional, default to day)
# @param string $filter_payment_status A payment status to filter results by, can be a comma separated list (optional)
# @param string $filter_fulfillment_status An invoice fulfillment status to filter results by, can be a comma separated list (optional)
# @param int $start_date The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)
# @param int $end_date The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)
{
    my $params = {
    'currency_code' => {
        data_type => 'string',
        description => 'The code for a currency to get sales data for',
        required => '1',
    },
    'granularity' => {
        data_type => 'string',
        description => 'The time duration to aggregate by',
        required => '0',
    },
    'filter_payment_status' => {
        data_type => 'string',
        description => 'A payment status to filter results by, can be a comma separated list',
        required => '0',
    },
    'filter_fulfillment_status' => {
        data_type => 'string',
        description => 'An invoice fulfillment status to filter results by, can be a comma separated list',
        required => '0',
    },
    'start_date' => {
        data_type => 'int',
        description => 'The start of the time range to return, unix timestamp in seconds. Default is beginning of time',
        required => '0',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The end of the time range to return, unix timestamp in seconds. Default is end of time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_daily_invoices_using_get' } = { 
    	summary => 'Retrieve invoice counts aggregated by time ranges',
        params => $params,
        returns => 'PageResourceAggregateInvoiceReportResource',
        };
}
# @return PageResourceAggregateInvoiceReportResource
#
sub get_daily_invoices_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling get_daily_invoices_using_get");
    }

    # parse inputs
    my $_resource_path = '/reporting/orders/count/{currency_code}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'granularity'}) {
        $query_params->{'granularity'} = $self->{api_client}->to_query_value($args{'granularity'});
    }

    # query params
    if ( exists $args{'filter_payment_status'}) {
        $query_params->{'filter_payment_status'} = $self->{api_client}->to_query_value($args{'filter_payment_status'});
    }

    # query params
    if ( exists $args{'filter_fulfillment_status'}) {
        $query_params->{'filter_fulfillment_status'} = $self->{api_client}->to_query_value($args{'filter_fulfillment_status'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceAggregateInvoiceReportResource', $response);
    return $_response_object;
}

1;
