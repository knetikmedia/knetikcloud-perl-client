=begin comment

Knetik Platform API Documentation Latest

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

OpenAPI spec version: Latest
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::UsersInventoryApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# add_item_using_post1
#
# Adds an item to the user inventory
# 
# @param int $id The id of the user (required)
# @param UserInventoryAddRequest $user_inventory_add_request The user inventory add request object (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'user_inventory_add_request' => {
        data_type => 'UserInventoryAddRequest',
        description => 'The user inventory add request object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_item_using_post1' } = { 
    	summary => 'Adds an item to the user inventory',
        params => $params,
        returns => 'InvoiceResource',
        };
}
# @return InvoiceResource
#
sub add_item_using_post1 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling add_item_using_post1");
    }

    # parse inputs
    my $_resource_path = '/users/{id}/inventory';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'user_inventory_add_request'}) {
        $_body_data = $args{'user_inventory_add_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InvoiceResource', $response);
    return $_response_object;
}

#
# create_item_using_post
#
# Create an entitlement item
# 
# @param EntitlementItem $entitlement_item The entitlement item object (optional)
{
    my $params = {
    'entitlement_item' => {
        data_type => 'EntitlementItem',
        description => 'The entitlement item object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_item_using_post' } = { 
    	summary => 'Create an entitlement item',
        params => $params,
        returns => 'EntitlementItem',
        };
}
# @return EntitlementItem
#
sub create_item_using_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/entitlements';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'entitlement_item'}) {
        $_body_data = $args{'entitlement_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EntitlementItem', $response);
    return $_response_object;
}

#
# create_template_using_post3
#
# Create an entitlement template
# 
# @param ItemTemplateResource $template The entitlement template to be created (optional)
{
    my $params = {
    'template' => {
        data_type => 'ItemTemplateResource',
        description => 'The entitlement template to be created',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_template_using_post3' } = { 
    	summary => 'Create an entitlement template',
        params => $params,
        returns => 'ItemTemplateResource',
        };
}
# @return ItemTemplateResource
#
sub create_template_using_post3 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/entitlements/templates';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'template'}) {
        $_body_data = $args{'template'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ItemTemplateResource', $response);
    return $_response_object;
}

#
# delete_entitlement_template_using_delete
#
# Delete an entitlement template
# 
# @param string $id The id of the template (required)
# @param string $cascade The value needed to delete used templates (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    'cascade' => {
        data_type => 'string',
        description => 'The value needed to delete used templates',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_entitlement_template_using_delete' } = { 
    	summary => 'Delete an entitlement template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_entitlement_template_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_entitlement_template_using_delete");
    }

    # parse inputs
    my $_resource_path = '/entitlements/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'cascade'}) {
        $query_params->{'cascade'} = $self->{api_client}->to_query_value($args{'cascade'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_item_using_delete
#
# Delete an entitlement item
# 
# @param int $entitlement_id The id of the entitlement (required)
{
    my $params = {
    'entitlement_id' => {
        data_type => 'int',
        description => 'The id of the entitlement',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_item_using_delete' } = { 
    	summary => 'Delete an entitlement item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_item_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'entitlement_id' is set
    unless (exists $args{'entitlement_id'}) {
      croak("Missing the required parameter 'entitlement_id' when calling delete_item_using_delete");
    }

    # parse inputs
    my $_resource_path = '/entitlements/{entitlement_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'entitlement_id'}) {
        my $_base_variable = "{" . "entitlement_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entitlement_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# entitlement_check_using_get
#
# Check for access to an item without consuming
# 
# @param string $user_id The id of the user to check for or &#39;me&#39; for logged in user (required)
# @param int $item_id The id of the item (required)
# @param string $sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'The id of the user to check for or &#39;me&#39; for logged in user',
        required => '1',
    },
    'item_id' => {
        data_type => 'int',
        description => 'The id of the item',
        required => '1',
    },
    'sku' => {
        data_type => 'string',
        description => 'The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'entitlement_check_using_get' } = { 
    	summary => 'Check for access to an item without consuming',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub entitlement_check_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling entitlement_check_using_get");
    }

    # verify the required parameter 'item_id' is set
    unless (exists $args{'item_id'}) {
      croak("Missing the required parameter 'item_id' when calling entitlement_check_using_get");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/entitlements/{item_id}/check';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'sku'}) {
        $query_params->{'sku'} = $self->{api_client}->to_query_value($args{'sku'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'item_id'}) {
        my $_base_variable = "{" . "item_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# entitlement_use_using_post
#
# Use an item
# 
# @param string $user_id The id of the user to check for or &#39;me&#39; for logged in user (required)
# @param int $item_id The id of the item (required)
# @param string $sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
# @param string $info Any additional info to add to the log about this use (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'The id of the user to check for or &#39;me&#39; for logged in user',
        required => '1',
    },
    'item_id' => {
        data_type => 'int',
        description => 'The id of the item',
        required => '1',
    },
    'sku' => {
        data_type => 'string',
        description => 'The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out',
        required => '0',
    },
    'info' => {
        data_type => 'string',
        description => 'Any additional info to add to the log about this use',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'entitlement_use_using_post' } = { 
    	summary => 'Use an item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub entitlement_use_using_post {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling entitlement_use_using_post");
    }

    # verify the required parameter 'item_id' is set
    unless (exists $args{'item_id'}) {
      croak("Missing the required parameter 'item_id' when calling entitlement_use_using_post");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/entitlements/{item_id}/use';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'sku'}) {
        $query_params->{'sku'} = $self->{api_client}->to_query_value($args{'sku'});
    }

    # query params
    if ( exists $args{'info'}) {
        $query_params->{'info'} = $self->{api_client}->to_query_value($args{'info'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'item_id'}) {
        my $_base_variable = "{" . "item_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'item_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_currencies_using_get1
#
# List and search entitlement items
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_currencies_using_get1' } = { 
    	summary => 'List and search entitlement items',
        params => $params,
        returns => 'PageResourceEntitlementItem',
        };
}
# @return PageResourceEntitlementItem
#
sub get_currencies_using_get1 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/entitlements';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceEntitlementItem', $response);
    return $_response_object;
}

#
# get_entitlement_template_using_get
#
# Get a single entitlement template
# 
# @param string $id The id of the template (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_entitlement_template_using_get' } = { 
    	summary => 'Get a single entitlement template',
        params => $params,
        returns => 'ItemTemplateResource',
        };
}
# @return ItemTemplateResource
#
sub get_entitlement_template_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_entitlement_template_using_get");
    }

    # parse inputs
    my $_resource_path = '/entitlements/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ItemTemplateResource', $response);
    return $_response_object;
}

#
# get_entitlement_templates_using_get
#
# List and search entitlement templates
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_entitlement_templates_using_get' } = { 
    	summary => 'List and search entitlement templates',
        params => $params,
        returns => 'PageResourceItemTemplateResource',
        };
}
# @return PageResourceItemTemplateResource
#
sub get_entitlement_templates_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/entitlements/templates';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceItemTemplateResource', $response);
    return $_response_object;
}

#
# get_inventory_list_using_get
#
# List the user inventory entries for all users
# 
# @param boolean $inactive If true, accepts inactive user inventories (optional, default to false)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $filter_item_name Filter by items whose name starts with a string (optional)
# @param string $filter_username Filter by entries owned by the user with the specified username (optional)
# @param string $filter_group Filter by entries owned by the users in a given group, by unique name (optional)
# @param string $filter_date A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
{
    my $params = {
    'inactive' => {
        data_type => 'boolean',
        description => 'If true, accepts inactive user inventories',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'filter_item_name' => {
        data_type => 'string',
        description => 'Filter by items whose name starts with a string',
        required => '0',
    },
    'filter_username' => {
        data_type => 'string',
        description => 'Filter by entries owned by the user with the specified username',
        required => '0',
    },
    'filter_group' => {
        data_type => 'string',
        description => 'Filter by entries owned by the users in a given group, by unique name',
        required => '0',
    },
    'filter_date' => {
        data_type => 'string',
        description => 'A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inventory_list_using_get' } = { 
    	summary => 'List the user inventory entries for all users',
        params => $params,
        returns => 'PageResourceUserInventoryResource',
        };
}
# @return PageResourceUserInventoryResource
#
sub get_inventory_list_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/inventories';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inactive'}) {
        $query_params->{'inactive'} = $self->{api_client}->to_query_value($args{'inactive'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'filter_item_name'}) {
        $query_params->{'filter_item_name'} = $self->{api_client}->to_query_value($args{'filter_item_name'});
    }

    # query params
    if ( exists $args{'filter_username'}) {
        $query_params->{'filter_username'} = $self->{api_client}->to_query_value($args{'filter_username'});
    }

    # query params
    if ( exists $args{'filter_group'}) {
        $query_params->{'filter_group'} = $self->{api_client}->to_query_value($args{'filter_group'});
    }

    # query params
    if ( exists $args{'filter_date'}) {
        $query_params->{'filter_date'} = $self->{api_client}->to_query_value($args{'filter_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceUserInventoryResource', $response);
    return $_response_object;
}

#
# get_inventory_using_get
#
# Get an inventory entry
# 
# @param int $user_id The id of the inventory owner or &#39;me&#39; for the logged in user (required)
# @param int $id The id of the user inventory (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the inventory owner or &#39;me&#39; for the logged in user',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The id of the user inventory',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inventory_using_get' } = { 
    	summary => 'Get an inventory entry',
        params => $params,
        returns => 'UserInventoryResource',
        };
}
# @return UserInventoryResource
#
sub get_inventory_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_inventory_using_get");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_inventory_using_get");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/inventory/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserInventoryResource', $response);
    return $_response_object;
}

#
# get_item_using_get
#
# Get a single entitlement item
# 
# @param int $entitlement_id The id of the entitlement (required)
{
    my $params = {
    'entitlement_id' => {
        data_type => 'int',
        description => 'The id of the entitlement',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_item_using_get' } = { 
    	summary => 'Get a single entitlement item',
        params => $params,
        returns => 'EntitlementItem',
        };
}
# @return EntitlementItem
#
sub get_item_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'entitlement_id' is set
    unless (exists $args{'entitlement_id'}) {
      croak("Missing the required parameter 'entitlement_id' when calling get_item_using_get");
    }

    # parse inputs
    my $_resource_path = '/entitlements/{entitlement_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'entitlement_id'}) {
        my $_base_variable = "{" . "entitlement_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entitlement_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EntitlementItem', $response);
    return $_response_object;
}

#
# get_user_inventory_list_using_get
#
# List the user inventory entries for a given user
# 
# @param int $id The id of the user (required)
# @param boolean $inactive If true, accepts inactive user inventories (optional, default to false)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $filter_item_name Filter by items whose name starts with a string (optional)
# @param int $filter_min_date Filter for inventory added after the specified date, unix timestamp in seconds (optional)
# @param int $filter_max_date Filter for inventory added before the specified date, unix timestamp in seconds (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'inactive' => {
        data_type => 'boolean',
        description => 'If true, accepts inactive user inventories',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'filter_item_name' => {
        data_type => 'string',
        description => 'Filter by items whose name starts with a string',
        required => '0',
    },
    'filter_min_date' => {
        data_type => 'int',
        description => 'Filter for inventory added after the specified date, unix timestamp in seconds',
        required => '0',
    },
    'filter_max_date' => {
        data_type => 'int',
        description => 'Filter for inventory added before the specified date, unix timestamp in seconds',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_inventory_list_using_get' } = { 
    	summary => 'List the user inventory entries for a given user',
        params => $params,
        returns => 'PageResourceUserInventoryResource',
        };
}
# @return PageResourceUserInventoryResource
#
sub get_user_inventory_list_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_user_inventory_list_using_get");
    }

    # parse inputs
    my $_resource_path = '/users/{id}/inventory';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'inactive'}) {
        $query_params->{'inactive'} = $self->{api_client}->to_query_value($args{'inactive'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'filter_item_name'}) {
        $query_params->{'filter_item_name'} = $self->{api_client}->to_query_value($args{'filter_item_name'});
    }

    # query params
    if ( exists $args{'filter_min_date'}) {
        $query_params->{'filter_min_date'} = $self->{api_client}->to_query_value($args{'filter_min_date'});
    }

    # query params
    if ( exists $args{'filter_max_date'}) {
        $query_params->{'filter_max_date'} = $self->{api_client}->to_query_value($args{'filter_max_date'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceUserInventoryResource', $response);
    return $_response_object;
}

#
# get_user_inventory_log_using_get
#
# List the log entries for this inventory entry.
# 
# @param string $user_id The id of the inventory owner or &#39;me&#39; for the logged in user (required)
# @param int $id The id of the user inventory (required)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'user_id' => {
        data_type => 'string',
        description => 'The id of the inventory owner or &#39;me&#39; for the logged in user',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The id of the user inventory',
        required => '1',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_inventory_log_using_get' } = { 
    	summary => 'List the log entries for this inventory entry.',
        params => $params,
        returns => 'PageResourceUserItemLogResource',
        };
}
# @return PageResourceUserItemLogResource
#
sub get_user_inventory_log_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_inventory_log_using_get");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_user_inventory_log_using_get");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/inventory/{id}/log';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceUserItemLogResource', $response);
    return $_response_object;
}

#
# update_item_using_put1
#
# Update an entitlement item
# 
# @param int $entitlement_id The id of the entitlement (required)
# @param EntitlementItem $entitlement_item The entitlement item object (optional)
{
    my $params = {
    'entitlement_id' => {
        data_type => 'int',
        description => 'The id of the entitlement',
        required => '1',
    },
    'entitlement_item' => {
        data_type => 'EntitlementItem',
        description => 'The entitlement item object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_item_using_put1' } = { 
    	summary => 'Update an entitlement item',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_item_using_put1 {
    my ($self, %args) = @_;

    # verify the required parameter 'entitlement_id' is set
    unless (exists $args{'entitlement_id'}) {
      croak("Missing the required parameter 'entitlement_id' when calling update_item_using_put1");
    }

    # parse inputs
    my $_resource_path = '/entitlements/{entitlement_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'entitlement_id'}) {
        my $_base_variable = "{" . "entitlement_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'entitlement_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'entitlement_item'}) {
        $_body_data = $args{'entitlement_item'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_template_using_put3
#
# Update an entitlement template
# 
# @param string $id The id of the template (required)
# @param ItemTemplateResource $template The updated template (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    'template' => {
        data_type => 'ItemTemplateResource',
        description => 'The updated template',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_template_using_put3' } = { 
    	summary => 'Update an entitlement template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_template_using_put3 {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_template_using_put3");
    }

    # parse inputs
    my $_resource_path = '/entitlements/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'template'}) {
        $_body_data = $args{'template'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_user_inventory_behavior_data_using_put
#
# Set the behavior data for an inventory entry
# 
# @param int $user_id The id of the user (required)
# @param int $id The id of the user inventory (required)
# @param object $data The data map (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The id of the user inventory',
        required => '1',
    },
    'data' => {
        data_type => 'object',
        description => 'The data map',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_user_inventory_behavior_data_using_put' } = { 
    	summary => 'Set the behavior data for an inventory entry',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_user_inventory_behavior_data_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling update_user_inventory_behavior_data_using_put");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_user_inventory_behavior_data_using_put");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/inventory/{id}/behavior-data';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_user_inventory_expires_using_put
#
# Set the expiration date
# 
# @param int $user_id user_id (required)
# @param int $id The id of the user inventory (required)
# @param int $timestamp The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'user_id',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The id of the user inventory',
        required => '1',
    },
    'timestamp' => {
        data_type => 'int',
        description => 'The new expiration date as a unix timestamp in seconds. May be null (no body).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_user_inventory_expires_using_put' } = { 
    	summary => 'Set the expiration date',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_user_inventory_expires_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling update_user_inventory_expires_using_put");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_user_inventory_expires_using_put");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/inventory/{id}/expires';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'timestamp'}) {
        $_body_data = $args{'timestamp'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_user_inventory_status_using_put
#
# Set the status for an inventory entry
# 
# @param int $user_id The id of the user (required)
# @param int $id The id of the user inventory (required)
# @param string $inventory_status The inventory status object (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The id of the user inventory',
        required => '1',
    },
    'inventory_status' => {
        data_type => 'string',
        description => 'The inventory status object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_user_inventory_status_using_put' } = { 
    	summary => 'Set the status for an inventory entry',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_user_inventory_status_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling update_user_inventory_status_using_put");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_user_inventory_status_using_put");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/inventory/{id}/status';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'inventory_status'}) {
        $_body_data = $args{'inventory_status'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
