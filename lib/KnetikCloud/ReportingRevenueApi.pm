=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package KnetikCloud::ReportingRevenueApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use KnetikCloud::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'KnetikCloud::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = KnetikCloud::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_item_revenue
#
# Get item revenue info
# 
# @param string $currency_code The code for a currency to get sales data for (required)
# @param int $start_date The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
# @param int $end_date The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
{
    my $params = {
    'currency_code' => {
        data_type => 'string',
        description => 'The code for a currency to get sales data for',
        required => '1',
    },
    'start_date' => {
        data_type => 'int',
        description => 'The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time',
        required => '0',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The end of the time range to aggregate, unix timestamp in seconds. Default is end of time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_item_revenue' } = { 
    	summary => 'Get item revenue info',
        params => $params,
        returns => 'RevenueReportResource',
        };
}
# @return RevenueReportResource
#
sub get_item_revenue {
    my ($self, %args) = @_;

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling get_item_revenue");
    }

    # parse inputs
    my $_resource_path = '/reporting/revenue/item-sales/{currency_code}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RevenueReportResource', $response);
    return $_response_object;
}

#
# get_refund_revenue
#
# Get refund revenue info
# 
# @param string $currency_code The code for a currency to get refund data for (required)
# @param int $start_date The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
# @param int $end_date The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
{
    my $params = {
    'currency_code' => {
        data_type => 'string',
        description => 'The code for a currency to get refund data for',
        required => '1',
    },
    'start_date' => {
        data_type => 'int',
        description => 'The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time',
        required => '0',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The end of the time range to aggregate, unix timestamp in seconds. Default is end of time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_refund_revenue' } = { 
    	summary => 'Get refund revenue info',
        params => $params,
        returns => 'RevenueReportResource',
        };
}
# @return RevenueReportResource
#
sub get_refund_revenue {
    my ($self, %args) = @_;

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling get_refund_revenue");
    }

    # parse inputs
    my $_resource_path = '/reporting/revenue/refunds/{currency_code}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RevenueReportResource', $response);
    return $_response_object;
}

#
# get_revenue_by_country
#
# Get revenue info by country
# 
# @param string $currency_code The code for a currency to get sales data for (required)
# @param int $start_date The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
# @param int $end_date The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'currency_code' => {
        data_type => 'string',
        description => 'The code for a currency to get sales data for',
        required => '1',
    },
    'start_date' => {
        data_type => 'int',
        description => 'The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time',
        required => '0',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The end of the time range to aggregate, unix timestamp in seconds. Default is end of time',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_revenue_by_country' } = { 
    	summary => 'Get revenue info by country',
        params => $params,
        returns => 'PageResourceRevenueCountryReportResource',
        };
}
# @return PageResourceRevenueCountryReportResource
#
sub get_revenue_by_country {
    my ($self, %args) = @_;

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling get_revenue_by_country");
    }

    # parse inputs
    my $_resource_path = '/reporting/revenue/countries/{currency_code}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceRevenueCountryReportResource', $response);
    return $_response_object;
}

#
# get_revenue_by_item
#
# Get revenue info by item
# 
# @param string $currency_code The code for a currency to get sales data for (required)
# @param int $start_date The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
# @param int $end_date The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'currency_code' => {
        data_type => 'string',
        description => 'The code for a currency to get sales data for',
        required => '1',
    },
    'start_date' => {
        data_type => 'int',
        description => 'The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time',
        required => '0',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The end of the time range to aggregate, unix timestamp in seconds. Default is end of time',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_revenue_by_item' } = { 
    	summary => 'Get revenue info by item',
        params => $params,
        returns => 'PageResourceRevenueProductReportResource',
        };
}
# @return PageResourceRevenueProductReportResource
#
sub get_revenue_by_item {
    my ($self, %args) = @_;

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling get_revenue_by_item");
    }

    # parse inputs
    my $_resource_path = '/reporting/revenue/products/{currency_code}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceRevenueProductReportResource', $response);
    return $_response_object;
}

#
# get_subscription_revenue
#
# Get subscription revenue info
# 
# @param string $currency_code The code for a currency to get sales data for (required)
# @param int $start_date The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)
# @param int $end_date The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)
{
    my $params = {
    'currency_code' => {
        data_type => 'string',
        description => 'The code for a currency to get sales data for',
        required => '1',
    },
    'start_date' => {
        data_type => 'int',
        description => 'The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time',
        required => '0',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The end of the time range to aggregate, unix timestamp in seconds. Default is end of time',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subscription_revenue' } = { 
    	summary => 'Get subscription revenue info',
        params => $params,
        returns => 'RevenueReportResource',
        };
}
# @return RevenueReportResource
#
sub get_subscription_revenue {
    my ($self, %args) = @_;

    # verify the required parameter 'currency_code' is set
    unless (exists $args{'currency_code'}) {
      croak("Missing the required parameter 'currency_code' when calling get_subscription_revenue");
    }

    # parse inputs
    my $_resource_path = '/reporting/revenue/subscription-sales/{currency_code}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # path params
    if ( exists $args{'currency_code'}) {
        my $_base_variable = "{" . "currency_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'currency_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RevenueReportResource', $response);
    return $_response_object;
}

1;
