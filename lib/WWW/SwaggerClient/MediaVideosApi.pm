=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::MediaVideosApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# add_comment_using_post1
#
# Add a new video comment
# 
# @param int $video_id The video id  (required)
# @param CommentResource $comment_resource The comment object (optional)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id ',
        required => '1',
    },
    'comment_resource' => {
        data_type => 'CommentResource',
        description => 'The comment object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_comment_using_post1' } = { 
    	summary => 'Add a new video comment',
        params => $params,
        returns => 'CommentResource',
        };
}
# @return CommentResource
#
sub add_comment_using_post1 {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling add_comment_using_post1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/comments';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'comment_resource'}) {
        $_body_data = $args{'comment_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CommentResource', $response);
    return $_response_object;
}

#
# add_contributor_using_post
#
# Adds a contributor to a video
# 
# @param int $video_id The video id (required)
# @param ContributionResource $contribution_resource The contribution object (optional)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'contribution_resource' => {
        data_type => 'ContributionResource',
        description => 'The contribution object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_contributor_using_post' } = { 
    	summary => 'Adds a contributor to a video',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub add_contributor_using_post {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling add_contributor_using_post");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/contributors';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'contribution_resource'}) {
        $_body_data = $args{'contribution_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# add_disposition_using_post1
#
# Add a new Video disposition
# 
# @param int $video_id The video id (required)
# @param DispositionResource $disposition_resource The disposition object (optional)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'disposition_resource' => {
        data_type => 'DispositionResource',
        description => 'The disposition object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_disposition_using_post1' } = { 
    	summary => 'Add a new Video disposition',
        params => $params,
        returns => 'DispositionResource',
        };
}
# @return DispositionResource
#
sub add_disposition_using_post1 {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling add_disposition_using_post1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/dispositions';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'disposition_resource'}) {
        $_body_data = $args{'disposition_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DispositionResource', $response);
    return $_response_object;
}

#
# add_flag_using_post
#
# Add a new flag
# 
# @param int $video_id The video id (required)
# @param string $reason The flag reason (optional)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'reason' => {
        data_type => 'string',
        description => 'The flag reason',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_flag_using_post' } = { 
    	summary => 'Add a new flag',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub add_flag_using_post {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling add_flag_using_post");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/moderation';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'reason'}) {
        $_body_data = $args{'reason'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# add_related_using_post
#
# Adds one or more existing videos as related to this one
# 
# @param int $video_id The video id (required)
# @param VideoRelationshipResource $video_relationship_resource The video relationship object  (optional)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'video_relationship_resource' => {
        data_type => 'VideoRelationshipResource',
        description => 'The video relationship object ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_related_using_post' } = { 
    	summary => 'Adds one or more existing videos as related to this one',
        params => $params,
        returns => 'VideoRelationshipResource',
        };
}
# @return VideoRelationshipResource
#
sub add_related_using_post {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling add_related_using_post");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/related';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'video_relationship_resource'}) {
        $_body_data = $args{'video_relationship_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('VideoRelationshipResource', $response);
    return $_response_object;
}

#
# add_video_using_post
#
# Adds a new video in the system
# 
# @param VideoResource $video_resource The video object (optional)
{
    my $params = {
    'video_resource' => {
        data_type => 'VideoResource',
        description => 'The video object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_video_using_post' } = { 
    	summary => 'Adds a new video in the system',
        params => $params,
        returns => 'VideoResource',
        };
}
# @return VideoResource
#
sub add_video_using_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/media/videos';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'video_resource'}) {
        $_body_data = $args{'video_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('VideoResource', $response);
    return $_response_object;
}

#
# add_whitelist_using_post
#
# Adds a user to a video's whitelist
# 
# @param int $id The video id (required)
# @param int $user_id The user id (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'user_id' => {
        data_type => 'int',
        description => 'The user id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_whitelist_using_post' } = { 
    	summary => 'Adds a user to a video&#39;s whitelist',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub add_whitelist_using_post {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling add_whitelist_using_post");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{id}/whitelist';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'user_id'}) {
        $_body_data = $args{'user_id'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_comment_using_delete1
#
# Delete a video comment
# 
# @param int $video_id The video id (required)
# @param int $id The comment id (required)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The comment id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_comment_using_delete1' } = { 
    	summary => 'Delete a video comment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_comment_using_delete1 {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling delete_comment_using_delete1");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_comment_using_delete1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/comments/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_disposition_using_delete1
#
# Delete a video comment
# 
# @param int $disposition_id The disposition id (required)
{
    my $params = {
    'disposition_id' => {
        data_type => 'int',
        description => 'The disposition id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_disposition_using_delete1' } = { 
    	summary => 'Delete a video comment',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_disposition_using_delete1 {
    my ($self, %args) = @_;

    # verify the required parameter 'disposition_id' is set
    unless (exists $args{'disposition_id'}) {
      croak("Missing the required parameter 'disposition_id' when calling delete_disposition_using_delete1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/dispositions/{disposition_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'disposition_id'}) {
        my $_base_variable = "{" . "disposition_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'disposition_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_flag_using_delete
#
# Delete a flag
# 
# @param int $video_id The video id (required)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_flag_using_delete' } = { 
    	summary => 'Delete a flag',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_flag_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling delete_flag_using_delete");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/moderation';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_relationship_using_delete1
#
# Delete a video's relationship
# 
# @param int $video_id The video id (required)
# @param int $id The relationship id (required)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The relationship id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_relationship_using_delete1' } = { 
    	summary => 'Delete a video&#39;s relationship',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_relationship_using_delete1 {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling delete_relationship_using_delete1");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_relationship_using_delete1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/related/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_video_using_delete
#
# Removes a video from the system if no resources are attached to it
# 
# @param int $id The video id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_video_using_delete' } = { 
    	summary => 'Removes a video from the system if no resources are attached to it',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_video_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_video_using_delete");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_comments_using_get1
#
# Returns a page of comments for a video
# 
# @param int $video_id The video id (required)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_comments_using_get1' } = { 
    	summary => 'Returns a page of comments for a video',
        params => $params,
        returns => 'PageResourceCommentResource',
        };
}
# @return PageResourceCommentResource
#
sub get_comments_using_get1 {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling get_comments_using_get1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/comments';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceCommentResource', $response);
    return $_response_object;
}

#
# get_dispositions_using_get1
#
# Returns a page of dispositions for a video
# 
# @param int $video_id The video id (required)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dispositions_using_get1' } = { 
    	summary => 'Returns a page of dispositions for a video',
        params => $params,
        returns => 'PageResourceDispositionResource',
        };
}
# @return PageResourceDispositionResource
#
sub get_dispositions_using_get1 {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling get_dispositions_using_get1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/dispositions';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceDispositionResource', $response);
    return $_response_object;
}

#
# get_related_using_get
#
# Returns a page of video relationships
# 
# @param int $video_id The video id (required)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_related_using_get' } = { 
    	summary => 'Returns a page of video relationships',
        params => $params,
        returns => 'PageResourceVideoRelationshipResource',
        };
}
# @return PageResourceVideoRelationshipResource
#
sub get_related_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling get_related_using_get");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/related';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceVideoRelationshipResource', $response);
    return $_response_object;
}

#
# get_user_videos_using_get
#
# Get user videos
# 
# @param int $user_id The user id (required)
# @param boolean $exclude_flagged Skip videos that have been flagged by the current user (optional, default to true)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The user id',
        required => '1',
    },
    'exclude_flagged' => {
        data_type => 'boolean',
        description => 'Skip videos that have been flagged by the current user',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_videos_using_get' } = { 
    	summary => 'Get user videos',
        params => $params,
        returns => 'PageResourceVideoResource',
        };
}
# @return PageResourceVideoResource
#
sub get_user_videos_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_videos_using_get");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/videos';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'exclude_flagged'}) {
        $query_params->{'exclude_flagged'} = $self->{api_client}->to_query_value($args{'exclude_flagged'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceVideoResource', $response);
    return $_response_object;
}

#
# get_video_using_get
#
# Loads a specific video details
# 
# @param int $id The video id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_video_using_get' } = { 
    	summary => 'Loads a specific video details',
        params => $params,
        returns => 'VideoResource',
        };
}
# @return VideoResource
#
sub get_video_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_video_using_get");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('VideoResource', $response);
    return $_response_object;
}

#
# remove_contributor_using_delete
#
# Removes a contributor from a video
# 
# @param int $video_id The video id (required)
# @param int $id The contributor id (required)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The contributor id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_contributor_using_delete' } = { 
    	summary => 'Removes a contributor from a video',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub remove_contributor_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling remove_contributor_using_delete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling remove_contributor_using_delete");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/contributors/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# remove_whitelist_using_delete
#
# Removes a user from a video's whitelist
# 
# @param int $video_id The video id (required)
# @param int $id The user id (required)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The user id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_whitelist_using_delete' } = { 
    	summary => 'Removes a user from a video&#39;s whitelist',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub remove_whitelist_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling remove_whitelist_using_delete");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling remove_whitelist_using_delete");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/whitelist/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# search_videos_using_get
#
# Search videos using the documented filters
# 
# @param boolean $exclude_flagged Skip videos that have been flagged by the current user (optional, default to true)
# @param string $filter_videos_by_uploader Filter for videos by uploader id (optional)
# @param string $filter_category Filter for videos from a specific category by id (optional)
# @param string $filter_tagset Filter for videos with specified tags (separated by comma) (optional)
# @param string $filter_videos_by_name Filter for videos which name *STARTS* with the given string (optional)
# @param string $filter_videos_by_contributor Filter for videos with contribution from the artist specified by ID (optional)
# @param string $filter_videos_by_author Filter for videos with an artist as author specified by ID (optional)
# @param boolean $filter_has_author Filter for videos that have an author set if true, or that have no author if false (optional)
# @param boolean $filter_has_uploader Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
# @param string $filter_related_to Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
# @param boolean $filter_friends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
# @param string $filter_disposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)
{
    my $params = {
    'exclude_flagged' => {
        data_type => 'boolean',
        description => 'Skip videos that have been flagged by the current user',
        required => '0',
    },
    'filter_videos_by_uploader' => {
        data_type => 'string',
        description => 'Filter for videos by uploader id',
        required => '0',
    },
    'filter_category' => {
        data_type => 'string',
        description => 'Filter for videos from a specific category by id',
        required => '0',
    },
    'filter_tagset' => {
        data_type => 'string',
        description => 'Filter for videos with specified tags (separated by comma)',
        required => '0',
    },
    'filter_videos_by_name' => {
        data_type => 'string',
        description => 'Filter for videos which name *STARTS* with the given string',
        required => '0',
    },
    'filter_videos_by_contributor' => {
        data_type => 'string',
        description => 'Filter for videos with contribution from the artist specified by ID',
        required => '0',
    },
    'filter_videos_by_author' => {
        data_type => 'string',
        description => 'Filter for videos with an artist as author specified by ID',
        required => '0',
    },
    'filter_has_author' => {
        data_type => 'boolean',
        description => 'Filter for videos that have an author set if true, or that have no author if false',
        required => '0',
    },
    'filter_has_uploader' => {
        data_type => 'boolean',
        description => 'Filter for videos that have an uploader set if true, or that have no uploader if false',
        required => '0',
    },
    'filter_related_to' => {
        data_type => 'string',
        description => 'Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well',
        required => '0',
    },
    'filter_friends' => {
        data_type => 'boolean',
        description => 'Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission)',
        required => '0',
    },
    'filter_disposition' => {
        data_type => 'string',
        description => 'Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_videos_using_get' } = { 
    	summary => 'Search videos using the documented filters',
        params => $params,
        returns => 'PageResourceVideoResource',
        };
}
# @return PageResourceVideoResource
#
sub search_videos_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/media/videos';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'exclude_flagged'}) {
        $query_params->{'exclude_flagged'} = $self->{api_client}->to_query_value($args{'exclude_flagged'});
    }

    # query params
    if ( exists $args{'filter_videos_by_uploader'}) {
        $query_params->{'filter_videos_by_uploader'} = $self->{api_client}->to_query_value($args{'filter_videos_by_uploader'});
    }

    # query params
    if ( exists $args{'filter_category'}) {
        $query_params->{'filter_category'} = $self->{api_client}->to_query_value($args{'filter_category'});
    }

    # query params
    if ( exists $args{'filter_tagset'}) {
        $query_params->{'filter_tagset'} = $self->{api_client}->to_query_value($args{'filter_tagset'});
    }

    # query params
    if ( exists $args{'filter_videos_by_name'}) {
        $query_params->{'filter_videos_by_name'} = $self->{api_client}->to_query_value($args{'filter_videos_by_name'});
    }

    # query params
    if ( exists $args{'filter_videos_by_contributor'}) {
        $query_params->{'filter_videos_by_contributor'} = $self->{api_client}->to_query_value($args{'filter_videos_by_contributor'});
    }

    # query params
    if ( exists $args{'filter_videos_by_author'}) {
        $query_params->{'filter_videos_by_author'} = $self->{api_client}->to_query_value($args{'filter_videos_by_author'});
    }

    # query params
    if ( exists $args{'filter_has_author'}) {
        $query_params->{'filter_has_author'} = $self->{api_client}->to_query_value($args{'filter_has_author'});
    }

    # query params
    if ( exists $args{'filter_has_uploader'}) {
        $query_params->{'filter_has_uploader'} = $self->{api_client}->to_query_value($args{'filter_has_uploader'});
    }

    # query params
    if ( exists $args{'filter_related_to'}) {
        $query_params->{'filter_related_to'} = $self->{api_client}->to_query_value($args{'filter_related_to'});
    }

    # query params
    if ( exists $args{'filter_friends'}) {
        $query_params->{'filter_friends'} = $self->{api_client}->to_query_value($args{'filter_friends'});
    }

    # query params
    if ( exists $args{'filter_disposition'}) {
        $query_params->{'filter_disposition'} = $self->{api_client}->to_query_value($args{'filter_disposition'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceVideoResource', $response);
    return $_response_object;
}

#
# update_comment_using_put1
#
# Update video comment content 
# 
# @param int $video_id The video id (required)
# @param int $id The comment id (required)
# @param string $content The comment content (optional)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The comment id',
        required => '1',
    },
    'content' => {
        data_type => 'string',
        description => 'The comment content',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_comment_using_put1' } = { 
    	summary => 'Update video comment content ',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_comment_using_put1 {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling update_comment_using_put1");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_comment_using_put1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/comments/{id}/content';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'content'}) {
        $_body_data = $args{'content'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_relationship_using_put1
#
# Update a video's relationship details
# 
# @param int $video_id The video id (required)
# @param int $relationship_id The relationship id (required)
# @param string $details The video relationship details (optional)
{
    my $params = {
    'video_id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'relationship_id' => {
        data_type => 'int',
        description => 'The relationship id',
        required => '1',
    },
    'details' => {
        data_type => 'string',
        description => 'The video relationship details',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_relationship_using_put1' } = { 
    	summary => 'Update a video&#39;s relationship details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_relationship_using_put1 {
    my ($self, %args) = @_;

    # verify the required parameter 'video_id' is set
    unless (exists $args{'video_id'}) {
      croak("Missing the required parameter 'video_id' when calling update_relationship_using_put1");
    }

    # verify the required parameter 'relationship_id' is set
    unless (exists $args{'relationship_id'}) {
      croak("Missing the required parameter 'relationship_id' when calling update_relationship_using_put1");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{video_id}/related/{id}/relationship_details';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'video_id'}) {
        my $_base_variable = "{" . "video_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'video_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'relationship_id'}) {
        my $_base_variable = "{" . "relationship_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'relationship_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'details'}) {
        $_body_data = $args{'details'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_video_using_put
#
# Modifies a video's details
# 
# @param int $id The video id (required)
# @param VideoResource $video_resource The video object (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    'video_resource' => {
        data_type => 'VideoResource',
        description => 'The video object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_video_using_put' } = { 
    	summary => 'Modifies a video&#39;s details',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_video_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_video_using_put");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'video_resource'}) {
        $_body_data = $args{'video_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(knetik_oauth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# view_video_using_post
#
# Increment a video's view count
# 
# @param int $id The video id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The video id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'view_video_using_post' } = { 
    	summary => 'Increment a video&#39;s view count',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub view_video_using_post {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling view_video_using_post");
    }

    # parse inputs
    my $_resource_path = '/media/videos/{id}/views';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
