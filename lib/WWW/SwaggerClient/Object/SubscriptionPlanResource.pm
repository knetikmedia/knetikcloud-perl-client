=begin comment

Knetik Platform API Documentation Latest

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

OpenAPI spec version: Latest
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::Object::SubscriptionPlanResource;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

Knetik Platform API Documentation Latest

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

OpenAPI spec version: Latest
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::SwaggerClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'SubscriptionPlanResource',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'additional_properties' => {
    	datatype => 'HASH[string,Property]',
    	base_name => 'additional_properties',
    	description => 'A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this subscription',
    	format => '',
    	read_only => '',
    		},
    'billing_cycle_length' => {
    	datatype => 'int',
    	base_name => 'billing_cycle_length',
    	description => 'The length of the billing cycle in number of billing cycle unit',
    	format => '',
    	read_only => '',
    		},
    'billing_cycle_unit' => {
    	datatype => 'string',
    	base_name => 'billing_cycle_unit',
    	description => 'The time period unit to apply to the length of billing cycles',
    	format => '',
    	read_only => '',
    		},
    'consolidated' => {
    	datatype => 'boolean',
    	base_name => 'consolidated',
    	description => 'Whether this plan will be renewed on the consolidated billing cycle',
    	format => '',
    	read_only => '',
    		},
    'currency_code' => {
    	datatype => 'string',
    	base_name => 'currency_code',
    	description => 'The ISO3 currency code to use for the fees',
    	format => '',
    	read_only => '',
    		},
    'end_date' => {
    	datatype => 'int',
    	base_name => 'end_date',
    	description => 'Used to schedule plan availability end date',
    	format => '',
    	read_only => '',
    		},
    'first_billing_cycle_length' => {
    	datatype => 'int',
    	base_name => 'first_billing_cycle_length',
    	description => 'Optional override for the length of the first billing cycle before the first recurring billing',
    	format => '',
    	read_only => '',
    		},
    'first_billing_cycle_unit' => {
    	datatype => 'string',
    	base_name => 'first_billing_cycle_unit',
    	description => 'The time period unit to apply to the length of the first billing cycle. Required when first_billing_cycle_length is specified',
    	format => '',
    	read_only => '',
    		},
    'grace_period' => {
    	datatype => 'int',
    	base_name => 'grace_period',
    	description => 'The number of late payment days before a subscription is canceled',
    	format => '',
    	read_only => '',
    		},
    'id' => {
    	datatype => 'string',
    	base_name => 'id',
    	description => 'The id of the plan used to generate the SKUs',
    	format => '',
    	read_only => '',
    		},
    'initial_fee' => {
    	datatype => 'double',
    	base_name => 'initial_fee',
    	description => 'The fee charged when the subscription is purchased',
    	format => '',
    	read_only => '',
    		},
    'initial_sku' => {
    	datatype => 'string',
    	base_name => 'initial_sku',
    	description => 'The SKU to be used when purchasing the subscription through the cart',
    	format => '',
    	read_only => '',
    		},
    'late_payment_fee' => {
    	datatype => 'double',
    	base_name => 'late_payment_fee',
    	description => 'The fee to add to the bill when an invoice has gone unpaid passed the grace period',
    	format => '',
    	read_only => '',
    		},
    'late_payment_sku' => {
    	datatype => 'string',
    	base_name => 'late_payment_sku',
    	description => 'The SKU that will show on the invoice when the subscription is delinquent',
    	format => '',
    	read_only => '',
    		},
    'locked' => {
    	datatype => 'boolean',
    	base_name => 'locked',
    	description => 'Whether this plan is locked because it has been purchased by at least one user.  When locked, a number of properties can no longer be changed',
    	format => '',
    	read_only => '',
    		},
    'max_bill_attempts' => {
    	datatype => 'int',
    	base_name => 'max_bill_attempts',
    	description => 'The number of charge attempts before the subscription becomes delinquent',
    	format => '',
    	read_only => '',
    		},
    'max_cycles' => {
    	datatype => 'int',
    	base_name => 'max_cycles',
    	description => 'Maximum number of renewals. If a migration plan is provided, the subscription will automatically switch to it when this limit is reached',
    	format => '',
    	read_only => '',
    		},
    'migrate_to_plan' => {
    	datatype => 'string',
    	base_name => 'migrate_to_plan',
    	description => 'Automatically migrate to the specified plan when the subscription is first renewed',
    	format => '',
    	read_only => '',
    		},
    'min_cycles' => {
    	datatype => 'int',
    	base_name => 'min_cycles',
    	description => 'The minimum number of renewals to charge for',
    	format => '',
    	read_only => '',
    		},
    'name' => {
    	datatype => 'string',
    	base_name => 'name',
    	description => 'The name of the plan used to generate the SKUs',
    	format => '',
    	read_only => '',
    		},
    'published' => {
    	datatype => 'boolean',
    	base_name => 'published',
    	description => 'Whether this plan is currently available',
    	format => '',
    	read_only => '',
    		},
    'reactivation_fee' => {
    	datatype => 'double',
    	base_name => 'reactivation_fee',
    	description => 'The fee to charge when a suspended subscription is to be re-activated',
    	format => '',
    	read_only => '',
    		},
    'reactivation_sku' => {
    	datatype => 'string',
    	base_name => 'reactivation_sku',
    	description => 'The SKU that will show on the invoice when the subscription is re-activated after a suspension',
    	format => '',
    	read_only => '',
    		},
    'recurring_fee' => {
    	datatype => 'double',
    	base_name => 'recurring_fee',
    	description => 'The recurring fee to charge for each renewal',
    	format => '',
    	read_only => '',
    		},
    'recurring_sku' => {
    	datatype => 'string',
    	base_name => 'recurring_sku',
    	description => 'The SKU that will show on the invoice when the subscription is activated',
    	format => '',
    	read_only => '',
    		},
    'start_date' => {
    	datatype => 'int',
    	base_name => 'start_date',
    	description => 'Used to schedule plan availability start date',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'additional_properties' => 'HASH[string,Property]',
    'billing_cycle_length' => 'int',
    'billing_cycle_unit' => 'string',
    'consolidated' => 'boolean',
    'currency_code' => 'string',
    'end_date' => 'int',
    'first_billing_cycle_length' => 'int',
    'first_billing_cycle_unit' => 'string',
    'grace_period' => 'int',
    'id' => 'string',
    'initial_fee' => 'double',
    'initial_sku' => 'string',
    'late_payment_fee' => 'double',
    'late_payment_sku' => 'string',
    'locked' => 'boolean',
    'max_bill_attempts' => 'int',
    'max_cycles' => 'int',
    'migrate_to_plan' => 'string',
    'min_cycles' => 'int',
    'name' => 'string',
    'published' => 'boolean',
    'reactivation_fee' => 'double',
    'reactivation_sku' => 'string',
    'recurring_fee' => 'double',
    'recurring_sku' => 'string',
    'start_date' => 'int'
} );

__PACKAGE__->attribute_map( {
    'additional_properties' => 'additional_properties',
    'billing_cycle_length' => 'billing_cycle_length',
    'billing_cycle_unit' => 'billing_cycle_unit',
    'consolidated' => 'consolidated',
    'currency_code' => 'currency_code',
    'end_date' => 'end_date',
    'first_billing_cycle_length' => 'first_billing_cycle_length',
    'first_billing_cycle_unit' => 'first_billing_cycle_unit',
    'grace_period' => 'grace_period',
    'id' => 'id',
    'initial_fee' => 'initial_fee',
    'initial_sku' => 'initial_sku',
    'late_payment_fee' => 'late_payment_fee',
    'late_payment_sku' => 'late_payment_sku',
    'locked' => 'locked',
    'max_bill_attempts' => 'max_bill_attempts',
    'max_cycles' => 'max_cycles',
    'migrate_to_plan' => 'migrate_to_plan',
    'min_cycles' => 'min_cycles',
    'name' => 'name',
    'published' => 'published',
    'reactivation_fee' => 'reactivation_fee',
    'reactivation_sku' => 'reactivation_sku',
    'recurring_fee' => 'recurring_fee',
    'recurring_sku' => 'recurring_sku',
    'start_date' => 'start_date'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
