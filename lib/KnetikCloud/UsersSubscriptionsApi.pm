=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package KnetikCloud::UsersSubscriptionsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use KnetikCloud::ApiClient;
use KnetikCloud::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => KnetikCloud::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_user_subscription_details
#
# Get details about a user's subscription
# 
# @param int $user_id The id of the user (required)
# @param int $inventory_id The id of the user&#39;s inventory (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'inventory_id' => {
        data_type => 'int',
        description => 'The id of the user&#39;s inventory',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_subscription_details' } = { 
    	summary => 'Get details about a user&#39;s subscription',
        params => $params,
        returns => 'InventorySubscriptionResource',
        };
}
# @return InventorySubscriptionResource
#
sub get_user_subscription_details {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user_subscription_details");
    }

    # verify the required parameter 'inventory_id' is set
    unless (exists $args{'inventory_id'}) {
      croak("Missing the required parameter 'inventory_id' when calling get_user_subscription_details");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/subscriptions/{inventory_id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inventory_id'}) {
        my $_base_variable = "{" . "inventory_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inventory_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InventorySubscriptionResource', $response);
    return $_response_object;
}

#
# get_users_subscription_details
#
# Get details about a user's subscriptions
# 
# @param int $user_id The id of the user (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_users_subscription_details' } = { 
    	summary => 'Get details about a user&#39;s subscriptions',
        params => $params,
        returns => 'ARRAY[InventorySubscriptionResource]',
        };
}
# @return ARRAY[InventorySubscriptionResource]
#
sub get_users_subscription_details {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_users_subscription_details");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/subscriptions';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InventorySubscriptionResource]', $response);
    return $_response_object;
}

#
# reactivate_user_subscription
#
# Reactivate a subscription and charge fee
# 
# @param int $user_id The id of the user (required)
# @param int $inventory_id The id of the user&#39;s inventory (required)
# @param ReactivateSubscriptionRequest $reactivate_subscription_request The reactivate subscription request object inventory (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'inventory_id' => {
        data_type => 'int',
        description => 'The id of the user&#39;s inventory',
        required => '1',
    },
    'reactivate_subscription_request' => {
        data_type => 'ReactivateSubscriptionRequest',
        description => 'The reactivate subscription request object inventory',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reactivate_user_subscription' } = { 
    	summary => 'Reactivate a subscription and charge fee',
        params => $params,
        returns => 'InvoiceResource',
        };
}
# @return InvoiceResource
#
sub reactivate_user_subscription {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling reactivate_user_subscription");
    }

    # verify the required parameter 'inventory_id' is set
    unless (exists $args{'inventory_id'}) {
      croak("Missing the required parameter 'inventory_id' when calling reactivate_user_subscription");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/subscriptions/{inventory_id}/reactivate';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inventory_id'}) {
        my $_base_variable = "{" . "inventory_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inventory_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'reactivate_subscription_request'}) {
        $_body_data = $args{'reactivate_subscription_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InvoiceResource', $response);
    return $_response_object;
}

#
# set_subscription_bill_date
#
# Set a new date to bill a subscription on
# 
# @param int $user_id The id of the user (required)
# @param int $inventory_id The id of the user&#39;s inventory (required)
# @param int $bill_date The new bill date. Unix timestamp in seconds (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'inventory_id' => {
        data_type => 'int',
        description => 'The id of the user&#39;s inventory',
        required => '1',
    },
    'bill_date' => {
        data_type => 'int',
        description => 'The new bill date. Unix timestamp in seconds',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_subscription_bill_date' } = { 
    	summary => 'Set a new date to bill a subscription on',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub set_subscription_bill_date {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling set_subscription_bill_date");
    }

    # verify the required parameter 'inventory_id' is set
    unless (exists $args{'inventory_id'}) {
      croak("Missing the required parameter 'inventory_id' when calling set_subscription_bill_date");
    }

    # verify the required parameter 'bill_date' is set
    unless (exists $args{'bill_date'}) {
      croak("Missing the required parameter 'bill_date' when calling set_subscription_bill_date");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/subscriptions/{inventory_id}/bill-date';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inventory_id'}) {
        my $_base_variable = "{" . "inventory_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inventory_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'bill_date'}) {
        $_body_data = $args{'bill_date'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# set_subscription_payment_method
#
# Set the payment method to use for a subscription
# 
# @param int $user_id The id of the user (required)
# @param int $inventory_id The id of the user&#39;s inventory (required)
# @param int $payment_method_id The id of the payment method (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'inventory_id' => {
        data_type => 'int',
        description => 'The id of the user&#39;s inventory',
        required => '1',
    },
    'payment_method_id' => {
        data_type => 'int',
        description => 'The id of the payment method',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_subscription_payment_method' } = { 
    	summary => 'Set the payment method to use for a subscription',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub set_subscription_payment_method {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling set_subscription_payment_method");
    }

    # verify the required parameter 'inventory_id' is set
    unless (exists $args{'inventory_id'}) {
      croak("Missing the required parameter 'inventory_id' when calling set_subscription_payment_method");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/subscriptions/{inventory_id}/payment-method';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inventory_id'}) {
        my $_base_variable = "{" . "inventory_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inventory_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'payment_method_id'}) {
        $_body_data = $args{'payment_method_id'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# set_subscription_status
#
# Set the status of a subscription
# 
# @param int $user_id The id of the user (required)
# @param int $inventory_id The id of the user&#39;s inventory (required)
# @param string $status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'inventory_id' => {
        data_type => 'int',
        description => 'The id of the user&#39;s inventory',
        required => '1',
    },
    'status' => {
        data_type => 'string',
        description => 'The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_subscription_status' } = { 
    	summary => 'Set the status of a subscription',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub set_subscription_status {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling set_subscription_status");
    }

    # verify the required parameter 'inventory_id' is set
    unless (exists $args{'inventory_id'}) {
      croak("Missing the required parameter 'inventory_id' when calling set_subscription_status");
    }

    # verify the required parameter 'status' is set
    unless (exists $args{'status'}) {
      croak("Missing the required parameter 'status' when calling set_subscription_status");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/subscriptions/{inventory_id}/status';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inventory_id'}) {
        my $_base_variable = "{" . "inventory_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inventory_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'status'}) {
        $_body_data = $args{'status'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# set_user_subscription_plan
#
# Set a new subscription plan for a user
# 
# @param int $user_id The id of the user (required)
# @param int $inventory_id The id of the user&#39;s inventory (required)
# @param string $plan_id The id of the new plan. Must be from the same subscription (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The id of the user',
        required => '1',
    },
    'inventory_id' => {
        data_type => 'int',
        description => 'The id of the user&#39;s inventory',
        required => '1',
    },
    'plan_id' => {
        data_type => 'string',
        description => 'The id of the new plan. Must be from the same subscription',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_user_subscription_plan' } = { 
    	summary => 'Set a new subscription plan for a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub set_user_subscription_plan {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling set_user_subscription_plan");
    }

    # verify the required parameter 'inventory_id' is set
    unless (exists $args{'inventory_id'}) {
      croak("Missing the required parameter 'inventory_id' when calling set_user_subscription_plan");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/subscriptions/{inventory_id}/plan';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'inventory_id'}) {
        my $_base_variable = "{" . "inventory_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'inventory_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'plan_id'}) {
        $_body_data = $args{'plan_id'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
