=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package KnetikCloud::ReportingUsageApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use KnetikCloud::ApiClient;
use KnetikCloud::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => KnetikCloud::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_usage_by_day
#
# Returns aggregated endpoint usage information by day
# 
# @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
# @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
# @param boolean $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
# @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
# @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'start_date' => {
        data_type => 'int',
        description => 'The beginning of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The ending of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'combine_endpoints' => {
        data_type => 'boolean',
        description => 'Whether to combine counts from different endpoint. Removes the url and method from the result object',
        required => '0',
    },
    'method' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint method.  Must include url as well to work',
        required => '0',
    },
    'url' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint.  Must include method as well to work',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_usage_by_day' } = { 
    	summary => 'Returns aggregated endpoint usage information by day',
        params => $params,
        returns => 'PageResourceUsageInfo',
        };
}
# @return PageResourceUsageInfo
#
sub get_usage_by_day {
    my ($self, %args) = @_;

    # verify the required parameter 'start_date' is set
    unless (exists $args{'start_date'}) {
      croak("Missing the required parameter 'start_date' when calling get_usage_by_day");
    }

    # verify the required parameter 'end_date' is set
    unless (exists $args{'end_date'}) {
      croak("Missing the required parameter 'end_date' when calling get_usage_by_day");
    }

    # parse inputs
    my $_resource_path = '/reporting/usage/day';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'combine_endpoints'}) {
        $query_params->{'combine_endpoints'} = $self->{api_client}->to_query_value($args{'combine_endpoints'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceUsageInfo', $response);
    return $_response_object;
}

#
# get_usage_by_hour
#
# Returns aggregated endpoint usage information by hour
# 
# @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
# @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
# @param boolean $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
# @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
# @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'start_date' => {
        data_type => 'int',
        description => 'The beginning of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The ending of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'combine_endpoints' => {
        data_type => 'boolean',
        description => 'Whether to combine counts from different endpoint. Removes the url and method from the result object',
        required => '0',
    },
    'method' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint method.  Must include url as well to work',
        required => '0',
    },
    'url' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint.  Must include method as well to work',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_usage_by_hour' } = { 
    	summary => 'Returns aggregated endpoint usage information by hour',
        params => $params,
        returns => 'PageResourceUsageInfo',
        };
}
# @return PageResourceUsageInfo
#
sub get_usage_by_hour {
    my ($self, %args) = @_;

    # verify the required parameter 'start_date' is set
    unless (exists $args{'start_date'}) {
      croak("Missing the required parameter 'start_date' when calling get_usage_by_hour");
    }

    # verify the required parameter 'end_date' is set
    unless (exists $args{'end_date'}) {
      croak("Missing the required parameter 'end_date' when calling get_usage_by_hour");
    }

    # parse inputs
    my $_resource_path = '/reporting/usage/hour';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'combine_endpoints'}) {
        $query_params->{'combine_endpoints'} = $self->{api_client}->to_query_value($args{'combine_endpoints'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceUsageInfo', $response);
    return $_response_object;
}

#
# get_usage_by_minute
#
# Returns aggregated endpoint usage information by minute
# 
# @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
# @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
# @param boolean $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
# @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
# @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'start_date' => {
        data_type => 'int',
        description => 'The beginning of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The ending of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'combine_endpoints' => {
        data_type => 'boolean',
        description => 'Whether to combine counts from different endpoint. Removes the url and method from the result object',
        required => '0',
    },
    'method' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint method.  Must include url as well to work',
        required => '0',
    },
    'url' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint.  Must include method as well to work',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_usage_by_minute' } = { 
    	summary => 'Returns aggregated endpoint usage information by minute',
        params => $params,
        returns => 'PageResourceUsageInfo',
        };
}
# @return PageResourceUsageInfo
#
sub get_usage_by_minute {
    my ($self, %args) = @_;

    # verify the required parameter 'start_date' is set
    unless (exists $args{'start_date'}) {
      croak("Missing the required parameter 'start_date' when calling get_usage_by_minute");
    }

    # verify the required parameter 'end_date' is set
    unless (exists $args{'end_date'}) {
      croak("Missing the required parameter 'end_date' when calling get_usage_by_minute");
    }

    # parse inputs
    my $_resource_path = '/reporting/usage/minute';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'combine_endpoints'}) {
        $query_params->{'combine_endpoints'} = $self->{api_client}->to_query_value($args{'combine_endpoints'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceUsageInfo', $response);
    return $_response_object;
}

#
# get_usage_by_month
#
# Returns aggregated endpoint usage information by month
# 
# @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
# @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
# @param boolean $combine_endpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
# @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
# @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'start_date' => {
        data_type => 'int',
        description => 'The beginning of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The ending of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'combine_endpoints' => {
        data_type => 'boolean',
        description => 'Whether to combine counts from different endpoint. Removes the url and method from the result object',
        required => '0',
    },
    'method' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint method.  Must include url as well to work',
        required => '0',
    },
    'url' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint.  Must include method as well to work',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_usage_by_month' } = { 
    	summary => 'Returns aggregated endpoint usage information by month',
        params => $params,
        returns => 'PageResourceUsageInfo',
        };
}
# @return PageResourceUsageInfo
#
sub get_usage_by_month {
    my ($self, %args) = @_;

    # verify the required parameter 'start_date' is set
    unless (exists $args{'start_date'}) {
      croak("Missing the required parameter 'start_date' when calling get_usage_by_month");
    }

    # verify the required parameter 'end_date' is set
    unless (exists $args{'end_date'}) {
      croak("Missing the required parameter 'end_date' when calling get_usage_by_month");
    }

    # parse inputs
    my $_resource_path = '/reporting/usage/month';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'combine_endpoints'}) {
        $query_params->{'combine_endpoints'} = $self->{api_client}->to_query_value($args{'combine_endpoints'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceUsageInfo', $response);
    return $_response_object;
}

#
# get_usage_by_year
#
# Returns aggregated endpoint usage information by year
# 
# @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
# @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
# @param boolean $combine_endpoints Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)
# @param string $method Filter for a certain endpoint method.  Must include url as well to work (optional)
# @param string $url Filter for a certain endpoint.  Must include method as well to work (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
{
    my $params = {
    'start_date' => {
        data_type => 'int',
        description => 'The beginning of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The ending of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'combine_endpoints' => {
        data_type => 'boolean',
        description => 'Whether to combine counts from different endpoints. Removes the url and method from the result object',
        required => '0',
    },
    'method' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint method.  Must include url as well to work',
        required => '0',
    },
    'url' => {
        data_type => 'string',
        description => 'Filter for a certain endpoint.  Must include method as well to work',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_usage_by_year' } = { 
    	summary => 'Returns aggregated endpoint usage information by year',
        params => $params,
        returns => 'PageResourceUsageInfo',
        };
}
# @return PageResourceUsageInfo
#
sub get_usage_by_year {
    my ($self, %args) = @_;

    # verify the required parameter 'start_date' is set
    unless (exists $args{'start_date'}) {
      croak("Missing the required parameter 'start_date' when calling get_usage_by_year");
    }

    # verify the required parameter 'end_date' is set
    unless (exists $args{'end_date'}) {
      croak("Missing the required parameter 'end_date' when calling get_usage_by_year");
    }

    # parse inputs
    my $_resource_path = '/reporting/usage/year';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'combine_endpoints'}) {
        $query_params->{'combine_endpoints'} = $self->{api_client}->to_query_value($args{'combine_endpoints'});
    }

    # query params
    if ( exists $args{'method'}) {
        $query_params->{'method'} = $self->{api_client}->to_query_value($args{'method'});
    }

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceUsageInfo', $response);
    return $_response_object;
}

#
# get_usage_endpoints
#
# Returns list of endpoints called (method and url)
# 
# @param int $start_date The beginning of the range being requested, unix timestamp in seconds (required)
# @param int $end_date The ending of the range being requested, unix timestamp in seconds (required)
{
    my $params = {
    'start_date' => {
        data_type => 'int',
        description => 'The beginning of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    'end_date' => {
        data_type => 'int',
        description => 'The ending of the range being requested, unix timestamp in seconds',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_usage_endpoints' } = { 
    	summary => 'Returns list of endpoints called (method and url)',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub get_usage_endpoints {
    my ($self, %args) = @_;

    # verify the required parameter 'start_date' is set
    unless (exists $args{'start_date'}) {
      croak("Missing the required parameter 'start_date' when calling get_usage_endpoints");
    }

    # verify the required parameter 'end_date' is set
    unless (exists $args{'end_date'}) {
      croak("Missing the required parameter 'end_date' when calling get_usage_endpoints");
    }

    # parse inputs
    my $_resource_path = '/reporting/usage/endpoints';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'start_date'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'end_date'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

1;
