=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package KnetikCloud::TaxesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use KnetikCloud::ApiClient;
use KnetikCloud::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => KnetikCloud::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_country_tax
#
# Create a country tax
# 
# @param CountryTaxResource $tax_resource The tax object (optional)
{
    my $params = {
    'tax_resource' => {
        data_type => 'CountryTaxResource',
        description => 'The tax object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_country_tax' } = { 
    	summary => 'Create a country tax',
        params => $params,
        returns => 'CountryTaxResource',
        };
}
# @return CountryTaxResource
#
sub create_country_tax {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tax/countries';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'tax_resource'}) {
        $_body_data = $args{'tax_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CountryTaxResource', $response);
    return $_response_object;
}

#
# create_state_tax
#
# Create a state tax
# 
# @param string $country_code_iso3 The iso3 code of the country (required)
# @param StateTaxResource $tax_resource The tax object (optional)
{
    my $params = {
    'country_code_iso3' => {
        data_type => 'string',
        description => 'The iso3 code of the country',
        required => '1',
    },
    'tax_resource' => {
        data_type => 'StateTaxResource',
        description => 'The tax object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_state_tax' } = { 
    	summary => 'Create a state tax',
        params => $params,
        returns => 'StateTaxResource',
        };
}
# @return StateTaxResource
#
sub create_state_tax {
    my ($self, %args) = @_;

    # verify the required parameter 'country_code_iso3' is set
    unless (exists $args{'country_code_iso3'}) {
      croak("Missing the required parameter 'country_code_iso3' when calling create_state_tax");
    }

    # parse inputs
    my $_resource_path = '/tax/countries/{country_code_iso3}/states';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'country_code_iso3'}) {
        my $_base_variable = "{" . "country_code_iso3" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'country_code_iso3'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'tax_resource'}) {
        $_body_data = $args{'tax_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('StateTaxResource', $response);
    return $_response_object;
}

#
# delete_country_tax
#
# Delete an existing tax
# 
# @param string $country_code_iso3 The iso3 code of the country (required)
{
    my $params = {
    'country_code_iso3' => {
        data_type => 'string',
        description => 'The iso3 code of the country',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_country_tax' } = { 
    	summary => 'Delete an existing tax',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_country_tax {
    my ($self, %args) = @_;

    # verify the required parameter 'country_code_iso3' is set
    unless (exists $args{'country_code_iso3'}) {
      croak("Missing the required parameter 'country_code_iso3' when calling delete_country_tax");
    }

    # parse inputs
    my $_resource_path = '/tax/countries/{country_code_iso3}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'country_code_iso3'}) {
        my $_base_variable = "{" . "country_code_iso3" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'country_code_iso3'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_state_tax
#
# Delete an existing state tax
# 
# @param string $country_code_iso3 The iso3 code of the country (required)
# @param string $state_code The code of the state (required)
{
    my $params = {
    'country_code_iso3' => {
        data_type => 'string',
        description => 'The iso3 code of the country',
        required => '1',
    },
    'state_code' => {
        data_type => 'string',
        description => 'The code of the state',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_state_tax' } = { 
    	summary => 'Delete an existing state tax',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_state_tax {
    my ($self, %args) = @_;

    # verify the required parameter 'country_code_iso3' is set
    unless (exists $args{'country_code_iso3'}) {
      croak("Missing the required parameter 'country_code_iso3' when calling delete_state_tax");
    }

    # verify the required parameter 'state_code' is set
    unless (exists $args{'state_code'}) {
      croak("Missing the required parameter 'state_code' when calling delete_state_tax");
    }

    # parse inputs
    my $_resource_path = '/tax/countries/{country_code_iso3}/states/{state_code}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'country_code_iso3'}) {
        my $_base_variable = "{" . "country_code_iso3" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'country_code_iso3'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'state_code'}) {
        my $_base_variable = "{" . "state_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'state_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_country_tax
#
# Get a single tax
# 
# @param string $country_code_iso3 The iso3 code of the country (required)
{
    my $params = {
    'country_code_iso3' => {
        data_type => 'string',
        description => 'The iso3 code of the country',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_country_tax' } = { 
    	summary => 'Get a single tax',
        params => $params,
        returns => 'CountryTaxResource',
        };
}
# @return CountryTaxResource
#
sub get_country_tax {
    my ($self, %args) = @_;

    # verify the required parameter 'country_code_iso3' is set
    unless (exists $args{'country_code_iso3'}) {
      croak("Missing the required parameter 'country_code_iso3' when calling get_country_tax");
    }

    # parse inputs
    my $_resource_path = '/tax/countries/{country_code_iso3}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'country_code_iso3'}) {
        my $_base_variable = "{" . "country_code_iso3" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'country_code_iso3'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CountryTaxResource', $response);
    return $_response_object;
}

#
# get_country_taxes
#
# List and search taxes
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_country_taxes' } = { 
    	summary => 'List and search taxes',
        params => $params,
        returns => 'PageResourceCountryTaxResource',
        };
}
# @return PageResourceCountryTaxResource
#
sub get_country_taxes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tax/countries';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceCountryTaxResource', $response);
    return $_response_object;
}

#
# get_state_tax
#
# Get a single state tax
# 
# @param string $country_code_iso3 The iso3 code of the country (required)
# @param string $state_code The code of the state (required)
{
    my $params = {
    'country_code_iso3' => {
        data_type => 'string',
        description => 'The iso3 code of the country',
        required => '1',
    },
    'state_code' => {
        data_type => 'string',
        description => 'The code of the state',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_state_tax' } = { 
    	summary => 'Get a single state tax',
        params => $params,
        returns => 'StateTaxResource',
        };
}
# @return StateTaxResource
#
sub get_state_tax {
    my ($self, %args) = @_;

    # verify the required parameter 'country_code_iso3' is set
    unless (exists $args{'country_code_iso3'}) {
      croak("Missing the required parameter 'country_code_iso3' when calling get_state_tax");
    }

    # verify the required parameter 'state_code' is set
    unless (exists $args{'state_code'}) {
      croak("Missing the required parameter 'state_code' when calling get_state_tax");
    }

    # parse inputs
    my $_resource_path = '/tax/countries/{country_code_iso3}/states/{state_code}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'country_code_iso3'}) {
        my $_base_variable = "{" . "country_code_iso3" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'country_code_iso3'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'state_code'}) {
        my $_base_variable = "{" . "state_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'state_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('StateTaxResource', $response);
    return $_response_object;
}

#
# get_state_taxes_for_countries
#
# List and search taxes across all countries
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_state_taxes_for_countries' } = { 
    	summary => 'List and search taxes across all countries',
        params => $params,
        returns => 'PageResourceStateTaxResource',
        };
}
# @return PageResourceStateTaxResource
#
sub get_state_taxes_for_countries {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/tax/states';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceStateTaxResource', $response);
    return $_response_object;
}

#
# get_state_taxes_for_country
#
# List and search taxes within a country
# 
# @param string $country_code_iso3 The iso3 code of the country (required)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)
{
    my $params = {
    'country_code_iso3' => {
        data_type => 'string',
        description => 'The iso3 code of the country',
        required => '1',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_state_taxes_for_country' } = { 
    	summary => 'List and search taxes within a country',
        params => $params,
        returns => 'PageResourceStateTaxResource',
        };
}
# @return PageResourceStateTaxResource
#
sub get_state_taxes_for_country {
    my ($self, %args) = @_;

    # verify the required parameter 'country_code_iso3' is set
    unless (exists $args{'country_code_iso3'}) {
      croak("Missing the required parameter 'country_code_iso3' when calling get_state_taxes_for_country");
    }

    # parse inputs
    my $_resource_path = '/tax/countries/{country_code_iso3}/states';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    # path params
    if ( exists $args{'country_code_iso3'}) {
        my $_base_variable = "{" . "country_code_iso3" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'country_code_iso3'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceStateTaxResource', $response);
    return $_response_object;
}

#
# update_country_tax
#
# Create or update a tax
# 
# @param string $country_code_iso3 The iso3 code of the country (required)
# @param CountryTaxResource $tax_resource The tax object (optional)
{
    my $params = {
    'country_code_iso3' => {
        data_type => 'string',
        description => 'The iso3 code of the country',
        required => '1',
    },
    'tax_resource' => {
        data_type => 'CountryTaxResource',
        description => 'The tax object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_country_tax' } = { 
    	summary => 'Create or update a tax',
        params => $params,
        returns => 'CountryTaxResource',
        };
}
# @return CountryTaxResource
#
sub update_country_tax {
    my ($self, %args) = @_;

    # verify the required parameter 'country_code_iso3' is set
    unless (exists $args{'country_code_iso3'}) {
      croak("Missing the required parameter 'country_code_iso3' when calling update_country_tax");
    }

    # parse inputs
    my $_resource_path = '/tax/countries/{country_code_iso3}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'country_code_iso3'}) {
        my $_base_variable = "{" . "country_code_iso3" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'country_code_iso3'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'tax_resource'}) {
        $_body_data = $args{'tax_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CountryTaxResource', $response);
    return $_response_object;
}

#
# update_state_tax
#
# Create or update a state tax
# 
# @param string $country_code_iso3 The iso3 code of the country (required)
# @param string $state_code The code of the state (required)
# @param StateTaxResource $tax_resource The tax object (optional)
{
    my $params = {
    'country_code_iso3' => {
        data_type => 'string',
        description => 'The iso3 code of the country',
        required => '1',
    },
    'state_code' => {
        data_type => 'string',
        description => 'The code of the state',
        required => '1',
    },
    'tax_resource' => {
        data_type => 'StateTaxResource',
        description => 'The tax object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_state_tax' } = { 
    	summary => 'Create or update a state tax',
        params => $params,
        returns => 'StateTaxResource',
        };
}
# @return StateTaxResource
#
sub update_state_tax {
    my ($self, %args) = @_;

    # verify the required parameter 'country_code_iso3' is set
    unless (exists $args{'country_code_iso3'}) {
      croak("Missing the required parameter 'country_code_iso3' when calling update_state_tax");
    }

    # verify the required parameter 'state_code' is set
    unless (exists $args{'state_code'}) {
      croak("Missing the required parameter 'state_code' when calling update_state_tax");
    }

    # parse inputs
    my $_resource_path = '/tax/countries/{country_code_iso3}/states/{state_code}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'country_code_iso3'}) {
        my $_base_variable = "{" . "country_code_iso3" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'country_code_iso3'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'state_code'}) {
        my $_base_variable = "{" . "state_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'state_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'tax_resource'}) {
        $_body_data = $args{'tax_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('StateTaxResource', $response);
    return $_response_object;
}

1;
