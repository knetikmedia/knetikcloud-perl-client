=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by Swagger Codegen
# Please update the test cases below to test the API endpoints.
# Ref: https://github.com/swagger-api/swagger-codegen
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('KnetikCloud::MediaVideosApi');

my $api = KnetikCloud::MediaVideosApi->new();
isa_ok($api, 'KnetikCloud::MediaVideosApi');

#
# add_user_to_video_whitelist test
#
{
    my $id = undef; # replace NULL with a proper value
    my $user_id = undef; # replace NULL with a proper value
    my $result = $api->add_user_to_video_whitelist(id => $id, user_id => $user_id);
}

#
# add_video test
#
{
    my $video_resource = undef; # replace NULL with a proper value
    my $result = $api->add_video(video_resource => $video_resource);
}

#
# add_video_comment test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $comment_resource = undef; # replace NULL with a proper value
    my $result = $api->add_video_comment(video_id => $video_id, comment_resource => $comment_resource);
}

#
# add_video_contributor test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $contribution_resource = undef; # replace NULL with a proper value
    my $result = $api->add_video_contributor(video_id => $video_id, contribution_resource => $contribution_resource);
}

#
# add_video_flag test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $reason = undef; # replace NULL with a proper value
    my $result = $api->add_video_flag(video_id => $video_id, reason => $reason);
}

#
# add_video_relationships test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $video_relationship_resource = undef; # replace NULL with a proper value
    my $result = $api->add_video_relationships(video_id => $video_id, video_relationship_resource => $video_relationship_resource);
}

#
# create_video_disposition test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $disposition_resource = undef; # replace NULL with a proper value
    my $result = $api->create_video_disposition(video_id => $video_id, disposition_resource => $disposition_resource);
}

#
# delete_video test
#
{
    my $id = undef; # replace NULL with a proper value
    my $result = $api->delete_video(id => $id);
}

#
# delete_video_comment test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->delete_video_comment(video_id => $video_id, id => $id);
}

#
# delete_video_disposition test
#
{
    my $disposition_id = undef; # replace NULL with a proper value
    my $result = $api->delete_video_disposition(disposition_id => $disposition_id);
}

#
# delete_video_flag test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $result = $api->delete_video_flag(video_id => $video_id);
}

#
# delete_video_relationship test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->delete_video_relationship(video_id => $video_id, id => $id);
}

#
# get_user_videos test
#
{
    my $user_id = undef; # replace NULL with a proper value
    my $exclude_flagged = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $result = $api->get_user_videos(user_id => $user_id, exclude_flagged => $exclude_flagged, size => $size, page => $page);
}

#
# get_video test
#
{
    my $id = undef; # replace NULL with a proper value
    my $result = $api->get_video(id => $id);
}

#
# get_video_comments test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $result = $api->get_video_comments(video_id => $video_id, size => $size, page => $page);
}

#
# get_video_dispositions test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $result = $api->get_video_dispositions(video_id => $video_id, size => $size, page => $page);
}

#
# get_video_relationships test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $result = $api->get_video_relationships(video_id => $video_id, size => $size, page => $page);
}

#
# get_videos test
#
{
    my $exclude_flagged = undef; # replace NULL with a proper value
    my $filter_videos_by_uploader = undef; # replace NULL with a proper value
    my $filter_category = undef; # replace NULL with a proper value
    my $filter_tagset = undef; # replace NULL with a proper value
    my $filter_videos_by_name = undef; # replace NULL with a proper value
    my $filter_videos_by_contributor = undef; # replace NULL with a proper value
    my $filter_videos_by_author = undef; # replace NULL with a proper value
    my $filter_has_author = undef; # replace NULL with a proper value
    my $filter_has_uploader = undef; # replace NULL with a proper value
    my $filter_related_to = undef; # replace NULL with a proper value
    my $filter_friends = undef; # replace NULL with a proper value
    my $filter_disposition = undef; # replace NULL with a proper value
    my $size = undef; # replace NULL with a proper value
    my $page = undef; # replace NULL with a proper value
    my $order = undef; # replace NULL with a proper value
    my $result = $api->get_videos(exclude_flagged => $exclude_flagged, filter_videos_by_uploader => $filter_videos_by_uploader, filter_category => $filter_category, filter_tagset => $filter_tagset, filter_videos_by_name => $filter_videos_by_name, filter_videos_by_contributor => $filter_videos_by_contributor, filter_videos_by_author => $filter_videos_by_author, filter_has_author => $filter_has_author, filter_has_uploader => $filter_has_uploader, filter_related_to => $filter_related_to, filter_friends => $filter_friends, filter_disposition => $filter_disposition, size => $size, page => $page, order => $order);
}

#
# remove_user_from_video_whitelist test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->remove_user_from_video_whitelist(video_id => $video_id, id => $id);
}

#
# remove_video_contributor test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $result = $api->remove_video_contributor(video_id => $video_id, id => $id);
}

#
# update_video test
#
{
    my $id = undef; # replace NULL with a proper value
    my $video_resource = undef; # replace NULL with a proper value
    my $result = $api->update_video(id => $id, video_resource => $video_resource);
}

#
# update_video_comment test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $id = undef; # replace NULL with a proper value
    my $content = undef; # replace NULL with a proper value
    my $result = $api->update_video_comment(video_id => $video_id, id => $id, content => $content);
}

#
# update_video_relationship test
#
{
    my $video_id = undef; # replace NULL with a proper value
    my $relationship_id = undef; # replace NULL with a proper value
    my $details = undef; # replace NULL with a proper value
    my $result = $api->update_video_relationship(video_id => $video_id, relationship_id => $relationship_id, details => $details);
}

#
# view_video test
#
{
    my $id = undef; # replace NULL with a proper value
    my $result = $api->view_video(id => $id);
}


1;
