=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::GamificationTriviaApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# add_question_answers
#
# Add an answer to a question
# 
# @param string $question_id The id of the question (required)
# @param AnswerResource $answer The new answer (optional)
{
    my $params = {
    'question_id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    'answer' => {
        data_type => 'AnswerResource',
        description => 'The new answer',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_question_answers' } = { 
    	summary => 'Add an answer to a question',
        params => $params,
        returns => 'AnswerResource',
        };
}
# @return AnswerResource
#
sub add_question_answers {
    my ($self, %args) = @_;

    # verify the required parameter 'question_id' is set
    unless (exists $args{'question_id'}) {
      croak("Missing the required parameter 'question_id' when calling add_question_answers");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{question_id}/answers';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'question_id'}) {
        my $_base_variable = "{" . "question_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'question_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'answer'}) {
        $_body_data = $args{'answer'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnswerResource', $response);
    return $_response_object;
}

#
# add_question_tag
#
# Add a tag to a question
# 
# @param string $id The id of the question (required)
# @param string $tag The new tag (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    'tag' => {
        data_type => 'string',
        description => 'The new tag',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_question_tag' } = { 
    	summary => 'Add a tag to a question',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub add_question_tag {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling add_question_tag");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{id}/tags';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'tag'}) {
        $_body_data = $args{'tag'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# add_tag_to_questions_batch
#
# Add a tag to a batch of questions
# 
# @param string $tag The tag to add (optional)
# @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
# @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
# @param string $filter_category Filter for questions with specified category, by id (optional)
# @param string $filter_tag Filter for questions with specified tag (optional)
# @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
# @param string $filter_type Filter for questions with specified type (optional)
# @param boolean $filter_published Filter for questions currenctly published or not (optional)
# @param int $filter_import_id Filter for questions from a specific import job (optional)
{
    my $params = {
    'tag' => {
        data_type => 'string',
        description => 'The tag to add',
        required => '0',
    },
    'filter_search' => {
        data_type => 'string',
        description => 'Filter for documents whose question, answers or tags contains provided string',
        required => '0',
    },
    'filter_idset' => {
        data_type => 'string',
        description => 'Filter for documents whose id is in the comma separated list provided',
        required => '0',
    },
    'filter_category' => {
        data_type => 'string',
        description => 'Filter for questions with specified category, by id',
        required => '0',
    },
    'filter_tag' => {
        data_type => 'string',
        description => 'Filter for questions with specified tag',
        required => '0',
    },
    'filter_tagset' => {
        data_type => 'string',
        description => 'Filter for questions with specified tags (separated by comma)',
        required => '0',
    },
    'filter_type' => {
        data_type => 'string',
        description => 'Filter for questions with specified type',
        required => '0',
    },
    'filter_published' => {
        data_type => 'boolean',
        description => 'Filter for questions currenctly published or not',
        required => '0',
    },
    'filter_import_id' => {
        data_type => 'int',
        description => 'Filter for questions from a specific import job',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_tag_to_questions_batch' } = { 
    	summary => 'Add a tag to a batch of questions',
        params => $params,
        returns => 'int',
        };
}
# @return int
#
sub add_tag_to_questions_batch {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/questions/tags';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_search'}) {
        $query_params->{'filter_search'} = $self->{api_client}->to_query_value($args{'filter_search'});
    }

    # query params
    if ( exists $args{'filter_idset'}) {
        $query_params->{'filter_idset'} = $self->{api_client}->to_query_value($args{'filter_idset'});
    }

    # query params
    if ( exists $args{'filter_category'}) {
        $query_params->{'filter_category'} = $self->{api_client}->to_query_value($args{'filter_category'});
    }

    # query params
    if ( exists $args{'filter_tag'}) {
        $query_params->{'filter_tag'} = $self->{api_client}->to_query_value($args{'filter_tag'});
    }

    # query params
    if ( exists $args{'filter_tagset'}) {
        $query_params->{'filter_tagset'} = $self->{api_client}->to_query_value($args{'filter_tagset'});
    }

    # query params
    if ( exists $args{'filter_type'}) {
        $query_params->{'filter_type'} = $self->{api_client}->to_query_value($args{'filter_type'});
    }

    # query params
    if ( exists $args{'filter_published'}) {
        $query_params->{'filter_published'} = $self->{api_client}->to_query_value($args{'filter_published'});
    }

    # query params
    if ( exists $args{'filter_import_id'}) {
        $query_params->{'filter_import_id'} = $self->{api_client}->to_query_value($args{'filter_import_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'tag'}) {
        $_body_data = $args{'tag'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('int', $response);
    return $_response_object;
}

#
# create_import_job
#
# Create an import job
# 
# @param ImportJobResource $request The new import job (optional)
{
    my $params = {
    'request' => {
        data_type => 'ImportJobResource',
        description => 'The new import job',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_import_job' } = { 
    	summary => 'Create an import job',
        params => $params,
        returns => 'ImportJobResource',
        };
}
# @return ImportJobResource
#
sub create_import_job {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/import';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request'}) {
        $_body_data = $args{'request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImportJobResource', $response);
    return $_response_object;
}

#
# create_question
#
# Create a question
# 
# @param QuestionResource $question The new question (optional)
{
    my $params = {
    'question' => {
        data_type => 'QuestionResource',
        description => 'The new question',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_question' } = { 
    	summary => 'Create a question',
        params => $params,
        returns => 'QuestionResource',
        };
}
# @return QuestionResource
#
sub create_question {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/questions';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'question'}) {
        $_body_data = $args{'question'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QuestionResource', $response);
    return $_response_object;
}

#
# create_question_template
#
# Create a question template
# 
# @param QuestionTemplateResource $question_template_resource The question template resource object (optional)
{
    my $params = {
    'question_template_resource' => {
        data_type => 'QuestionTemplateResource',
        description => 'The question template resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_question_template' } = { 
    	summary => 'Create a question template',
        params => $params,
        returns => 'QuestionTemplateResource',
        };
}
# @return QuestionTemplateResource
#
sub create_question_template {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/questions/templates';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'question_template_resource'}) {
        $_body_data = $args{'question_template_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QuestionTemplateResource', $response);
    return $_response_object;
}

#
# delete_import_job
#
# Delete an import job
# 
# @param int $id The id of the job (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_import_job' } = { 
    	summary => 'Delete an import job',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_import_job {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_import_job");
    }

    # parse inputs
    my $_resource_path = '/trivia/import/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_question
#
# Delete a question
# 
# @param string $id The id of the question (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_question' } = { 
    	summary => 'Delete a question',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_question {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_question");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_question_answers
#
# Remove an answer from a question
# 
# @param string $question_id The id of the question (required)
# @param string $id The id of the answer (required)
{
    my $params = {
    'question_id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the answer',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_question_answers' } = { 
    	summary => 'Remove an answer from a question',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_question_answers {
    my ($self, %args) = @_;

    # verify the required parameter 'question_id' is set
    unless (exists $args{'question_id'}) {
      croak("Missing the required parameter 'question_id' when calling delete_question_answers");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_question_answers");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{question_id}/answers/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'question_id'}) {
        my $_base_variable = "{" . "question_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'question_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_question_template
#
# Delete a question template
# 
# @param string $id The id of the template (required)
# @param string $cascade The value needed to delete used templates (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    'cascade' => {
        data_type => 'string',
        description => 'The value needed to delete used templates',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_question_template' } = { 
    	summary => 'Delete a question template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_question_template {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_question_template");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'cascade'}) {
        $query_params->{'cascade'} = $self->{api_client}->to_query_value($args{'cascade'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_import_job
#
# Get an import job
# 
# @param int $id The id of the job (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_import_job' } = { 
    	summary => 'Get an import job',
        params => $params,
        returns => 'ImportJobResource',
        };
}
# @return ImportJobResource
#
sub get_import_job {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_import_job");
    }

    # parse inputs
    my $_resource_path = '/trivia/import/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImportJobResource', $response);
    return $_response_object;
}

#
# get_import_jobs
#
# Get a list of import job
# 
# @param string $filter_vendor Filter for jobs by vendor id (optional)
# @param string $filter_category Filter for jobs by category id (optional)
# @param string $filter_name Filter for jobs which name *STARTS* with the given string (optional)
# @param string $filter_status Filter for jobs that are in a specific set of statuses (comma separated) (optional)
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
{
    my $params = {
    'filter_vendor' => {
        data_type => 'string',
        description => 'Filter for jobs by vendor id',
        required => '0',
    },
    'filter_category' => {
        data_type => 'string',
        description => 'Filter for jobs by category id',
        required => '0',
    },
    'filter_name' => {
        data_type => 'string',
        description => 'Filter for jobs which name *STARTS* with the given string',
        required => '0',
    },
    'filter_status' => {
        data_type => 'string',
        description => 'Filter for jobs that are in a specific set of statuses (comma separated)',
        required => '0',
    },
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_import_jobs' } = { 
    	summary => 'Get a list of import job',
        params => $params,
        returns => 'PageResourceImportJobResource',
        };
}
# @return PageResourceImportJobResource
#
sub get_import_jobs {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/import';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_vendor'}) {
        $query_params->{'filter_vendor'} = $self->{api_client}->to_query_value($args{'filter_vendor'});
    }

    # query params
    if ( exists $args{'filter_category'}) {
        $query_params->{'filter_category'} = $self->{api_client}->to_query_value($args{'filter_category'});
    }

    # query params
    if ( exists $args{'filter_name'}) {
        $query_params->{'filter_name'} = $self->{api_client}->to_query_value($args{'filter_name'});
    }

    # query params
    if ( exists $args{'filter_status'}) {
        $query_params->{'filter_status'} = $self->{api_client}->to_query_value($args{'filter_status'});
    }

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceImportJobResource', $response);
    return $_response_object;
}

#
# get_question
#
# Get a single question
# 
# @param string $id The id of the question (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_question' } = { 
    	summary => 'Get a single question',
        params => $params,
        returns => 'QuestionResource',
        };
}
# @return QuestionResource
#
sub get_question {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_question");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QuestionResource', $response);
    return $_response_object;
}

#
# get_question_answer
#
# Get an answer for a question
# 
# @param string $question_id The id of the question (required)
# @param string $id The id of the answer (required)
{
    my $params = {
    'question_id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the answer',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_question_answer' } = { 
    	summary => 'Get an answer for a question',
        params => $params,
        returns => 'AnswerResource',
        };
}
# @return AnswerResource
#
sub get_question_answer {
    my ($self, %args) = @_;

    # verify the required parameter 'question_id' is set
    unless (exists $args{'question_id'}) {
      croak("Missing the required parameter 'question_id' when calling get_question_answer");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_question_answer");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{question_id}/answers/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'question_id'}) {
        my $_base_variable = "{" . "question_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'question_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnswerResource', $response);
    return $_response_object;
}

#
# get_question_answers
#
# List the answers available for a question
# 
# @param string $question_id The id of the question (required)
{
    my $params = {
    'question_id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_question_answers' } = { 
    	summary => 'List the answers available for a question',
        params => $params,
        returns => 'ARRAY[AnswerResource]',
        };
}
# @return ARRAY[AnswerResource]
#
sub get_question_answers {
    my ($self, %args) = @_;

    # verify the required parameter 'question_id' is set
    unless (exists $args{'question_id'}) {
      croak("Missing the required parameter 'question_id' when calling get_question_answers");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{question_id}/answers';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'question_id'}) {
        my $_base_variable = "{" . "question_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'question_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[AnswerResource]', $response);
    return $_response_object;
}

#
# get_question_deltas
#
# List question deltas in ascending order of updated date
# 
# @param int $since Timestamp in seconds (optional)
{
    my $params = {
    'since' => {
        data_type => 'int',
        description => 'Timestamp in seconds',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_question_deltas' } = { 
    	summary => 'List question deltas in ascending order of updated date',
        params => $params,
        returns => 'ARRAY[DeltaResource]',
        };
}
# @return ARRAY[DeltaResource]
#
sub get_question_deltas {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/questions/delta';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'since'}) {
        $query_params->{'since'} = $self->{api_client}->to_query_value($args{'since'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DeltaResource]', $response);
    return $_response_object;
}

#
# get_question_tags
#
# List the tags for a question
# 
# @param string $id The id of the question (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_question_tags' } = { 
    	summary => 'List the tags for a question',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub get_question_tags {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_question_tags");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{id}/tags';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# get_question_template
#
# Get a single question template
# 
# @param string $id The id of the template (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_question_template' } = { 
    	summary => 'Get a single question template',
        params => $params,
        returns => 'QuestionTemplateResource',
        };
}
# @return QuestionTemplateResource
#
sub get_question_template {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_question_template");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QuestionTemplateResource', $response);
    return $_response_object;
}

#
# get_question_templates
#
# List and search question templates
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_question_templates' } = { 
    	summary => 'List and search question templates',
        params => $params,
        returns => 'PageResourceQuestionTemplateResource',
        };
}
# @return PageResourceQuestionTemplateResource
#
sub get_question_templates {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/questions/templates';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceQuestionTemplateResource', $response);
    return $_response_object;
}

#
# get_questions
#
# List and search questions
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
# @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
# @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
# @param string $filter_category Filter for questions with specified category, by id (optional)
# @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
# @param string $filter_tag Filter for questions with specified tag (optional)
# @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
# @param boolean $filter_published Filter for questions currenctly published or not (optional)
# @param int $filter_import_id Filter for questions from a specific import job (optional)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    'filter_search' => {
        data_type => 'string',
        description => 'Filter for documents whose question, answers or tags contains provided string',
        required => '0',
    },
    'filter_idset' => {
        data_type => 'string',
        description => 'Filter for documents whose id is in the comma separated list provided',
        required => '0',
    },
    'filter_category' => {
        data_type => 'string',
        description => 'Filter for questions with specified category, by id',
        required => '0',
    },
    'filter_tagset' => {
        data_type => 'string',
        description => 'Filter for questions with specified tags (separated by comma)',
        required => '0',
    },
    'filter_tag' => {
        data_type => 'string',
        description => 'Filter for questions with specified tag',
        required => '0',
    },
    'filter_type' => {
        data_type => 'string',
        description => 'Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)',
        required => '0',
    },
    'filter_published' => {
        data_type => 'boolean',
        description => 'Filter for questions currenctly published or not',
        required => '0',
    },
    'filter_import_id' => {
        data_type => 'int',
        description => 'Filter for questions from a specific import job',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_questions' } = { 
    	summary => 'List and search questions',
        params => $params,
        returns => 'PageResourceQuestionResource',
        };
}
# @return PageResourceQuestionResource
#
sub get_questions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/questions';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    # query params
    if ( exists $args{'filter_search'}) {
        $query_params->{'filter_search'} = $self->{api_client}->to_query_value($args{'filter_search'});
    }

    # query params
    if ( exists $args{'filter_idset'}) {
        $query_params->{'filter_idset'} = $self->{api_client}->to_query_value($args{'filter_idset'});
    }

    # query params
    if ( exists $args{'filter_category'}) {
        $query_params->{'filter_category'} = $self->{api_client}->to_query_value($args{'filter_category'});
    }

    # query params
    if ( exists $args{'filter_tagset'}) {
        $query_params->{'filter_tagset'} = $self->{api_client}->to_query_value($args{'filter_tagset'});
    }

    # query params
    if ( exists $args{'filter_tag'}) {
        $query_params->{'filter_tag'} = $self->{api_client}->to_query_value($args{'filter_tag'});
    }

    # query params
    if ( exists $args{'filter_type'}) {
        $query_params->{'filter_type'} = $self->{api_client}->to_query_value($args{'filter_type'});
    }

    # query params
    if ( exists $args{'filter_published'}) {
        $query_params->{'filter_published'} = $self->{api_client}->to_query_value($args{'filter_published'});
    }

    # query params
    if ( exists $args{'filter_import_id'}) {
        $query_params->{'filter_import_id'} = $self->{api_client}->to_query_value($args{'filter_import_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceQuestionResource', $response);
    return $_response_object;
}

#
# get_questions_count
#
# Count questions based on filters
# 
# @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
# @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
# @param string $filter_category Filter for questions with specified category, by id (optional)
# @param string $filter_tag Filter for questions with specified tag (optional)
# @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
# @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
# @param boolean $filter_published Filter for questions currenctly published or not (optional)
{
    my $params = {
    'filter_search' => {
        data_type => 'string',
        description => 'Filter for documents whose question, answers or tags contains provided string',
        required => '0',
    },
    'filter_idset' => {
        data_type => 'string',
        description => 'Filter for documents whose id is in the comma separated list provided',
        required => '0',
    },
    'filter_category' => {
        data_type => 'string',
        description => 'Filter for questions with specified category, by id',
        required => '0',
    },
    'filter_tag' => {
        data_type => 'string',
        description => 'Filter for questions with specified tag',
        required => '0',
    },
    'filter_tagset' => {
        data_type => 'string',
        description => 'Filter for questions with specified tags (separated by comma)',
        required => '0',
    },
    'filter_type' => {
        data_type => 'string',
        description => 'Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)',
        required => '0',
    },
    'filter_published' => {
        data_type => 'boolean',
        description => 'Filter for questions currenctly published or not',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_questions_count' } = { 
    	summary => 'Count questions based on filters',
        params => $params,
        returns => 'int',
        };
}
# @return int
#
sub get_questions_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/questions/count';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_search'}) {
        $query_params->{'filter_search'} = $self->{api_client}->to_query_value($args{'filter_search'});
    }

    # query params
    if ( exists $args{'filter_idset'}) {
        $query_params->{'filter_idset'} = $self->{api_client}->to_query_value($args{'filter_idset'});
    }

    # query params
    if ( exists $args{'filter_category'}) {
        $query_params->{'filter_category'} = $self->{api_client}->to_query_value($args{'filter_category'});
    }

    # query params
    if ( exists $args{'filter_tag'}) {
        $query_params->{'filter_tag'} = $self->{api_client}->to_query_value($args{'filter_tag'});
    }

    # query params
    if ( exists $args{'filter_tagset'}) {
        $query_params->{'filter_tagset'} = $self->{api_client}->to_query_value($args{'filter_tagset'});
    }

    # query params
    if ( exists $args{'filter_type'}) {
        $query_params->{'filter_type'} = $self->{api_client}->to_query_value($args{'filter_type'});
    }

    # query params
    if ( exists $args{'filter_published'}) {
        $query_params->{'filter_published'} = $self->{api_client}->to_query_value($args{'filter_published'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('int', $response);
    return $_response_object;
}

#
# process_import_job
#
# Start processing an import job
# 
# @param int $id The id of the job (required)
# @param boolean $publish_now Whether the new questions should be published live immediately (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the job',
        required => '1',
    },
    'publish_now' => {
        data_type => 'boolean',
        description => 'Whether the new questions should be published live immediately',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'process_import_job' } = { 
    	summary => 'Start processing an import job',
        params => $params,
        returns => 'ImportJobResource',
        };
}
# @return ImportJobResource
#
sub process_import_job {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling process_import_job");
    }

    # verify the required parameter 'publish_now' is set
    unless (exists $args{'publish_now'}) {
      croak("Missing the required parameter 'publish_now' when calling process_import_job");
    }

    # parse inputs
    my $_resource_path = '/trivia/import/{id}/process';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'publish_now'}) {
        $query_params->{'publish_now'} = $self->{api_client}->to_query_value($args{'publish_now'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImportJobResource', $response);
    return $_response_object;
}

#
# remove_question_tag
#
# Remove a tag from a question
# 
# @param string $id The id of the question (required)
# @param string $tag The tag to remove (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    'tag' => {
        data_type => 'string',
        description => 'The tag to remove',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_question_tag' } = { 
    	summary => 'Remove a tag from a question',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub remove_question_tag {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling remove_question_tag");
    }

    # verify the required parameter 'tag' is set
    unless (exists $args{'tag'}) {
      croak("Missing the required parameter 'tag' when calling remove_question_tag");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{id}/tags/{tag}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'tag'}) {
        my $_base_variable = "{" . "tag" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tag'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# remove_tag_to_questions_batch
#
# Remove a tag from a batch of questions
# 
# @param string $tag The tag to remove (required)
# @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
# @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
# @param string $filter_category Filter for questions with specified category, by id (optional)
# @param string $filter_tag Filter for questions with specified tag (optional)
# @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
# @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
# @param boolean $filter_published Filter for questions currenctly published or not (optional)
# @param int $filter_import_id Filter for questions from a specific import job (optional)
{
    my $params = {
    'tag' => {
        data_type => 'string',
        description => 'The tag to remove',
        required => '1',
    },
    'filter_search' => {
        data_type => 'string',
        description => 'Filter for documents whose question, answers or tags contains provided string',
        required => '0',
    },
    'filter_idset' => {
        data_type => 'string',
        description => 'Filter for documents whose id is in the comma separated list provided',
        required => '0',
    },
    'filter_category' => {
        data_type => 'string',
        description => 'Filter for questions with specified category, by id',
        required => '0',
    },
    'filter_tag' => {
        data_type => 'string',
        description => 'Filter for questions with specified tag',
        required => '0',
    },
    'filter_tagset' => {
        data_type => 'string',
        description => 'Filter for questions with specified tags (separated by comma)',
        required => '0',
    },
    'filter_type' => {
        data_type => 'string',
        description => 'Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)',
        required => '0',
    },
    'filter_published' => {
        data_type => 'boolean',
        description => 'Filter for questions currenctly published or not',
        required => '0',
    },
    'filter_import_id' => {
        data_type => 'int',
        description => 'Filter for questions from a specific import job',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_tag_to_questions_batch' } = { 
    	summary => 'Remove a tag from a batch of questions',
        params => $params,
        returns => 'int',
        };
}
# @return int
#
sub remove_tag_to_questions_batch {
    my ($self, %args) = @_;

    # verify the required parameter 'tag' is set
    unless (exists $args{'tag'}) {
      croak("Missing the required parameter 'tag' when calling remove_tag_to_questions_batch");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/tags/{tag}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_search'}) {
        $query_params->{'filter_search'} = $self->{api_client}->to_query_value($args{'filter_search'});
    }

    # query params
    if ( exists $args{'filter_idset'}) {
        $query_params->{'filter_idset'} = $self->{api_client}->to_query_value($args{'filter_idset'});
    }

    # query params
    if ( exists $args{'filter_category'}) {
        $query_params->{'filter_category'} = $self->{api_client}->to_query_value($args{'filter_category'});
    }

    # query params
    if ( exists $args{'filter_tag'}) {
        $query_params->{'filter_tag'} = $self->{api_client}->to_query_value($args{'filter_tag'});
    }

    # query params
    if ( exists $args{'filter_tagset'}) {
        $query_params->{'filter_tagset'} = $self->{api_client}->to_query_value($args{'filter_tagset'});
    }

    # query params
    if ( exists $args{'filter_type'}) {
        $query_params->{'filter_type'} = $self->{api_client}->to_query_value($args{'filter_type'});
    }

    # query params
    if ( exists $args{'filter_published'}) {
        $query_params->{'filter_published'} = $self->{api_client}->to_query_value($args{'filter_published'});
    }

    # query params
    if ( exists $args{'filter_import_id'}) {
        $query_params->{'filter_import_id'} = $self->{api_client}->to_query_value($args{'filter_import_id'});
    }

    # path params
    if ( exists $args{'tag'}) {
        my $_base_variable = "{" . "tag" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'tag'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('int', $response);
    return $_response_object;
}

#
# search_question_tags
#
# List and search tags by the beginning of the string
# 
# @param string $filter_search Filter for tags starting with the given text (optional)
# @param string $filter_category Filter for tags on questions from a specific category (optional)
# @param int $filter_import_id Filter for tags on questions from a specific import job (optional)
{
    my $params = {
    'filter_search' => {
        data_type => 'string',
        description => 'Filter for tags starting with the given text',
        required => '0',
    },
    'filter_category' => {
        data_type => 'string',
        description => 'Filter for tags on questions from a specific category',
        required => '0',
    },
    'filter_import_id' => {
        data_type => 'int',
        description => 'Filter for tags on questions from a specific import job',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_question_tags' } = { 
    	summary => 'List and search tags by the beginning of the string',
        params => $params,
        returns => 'Collectionstring',
        };
}
# @return Collectionstring
#
sub search_question_tags {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/tags';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_search'}) {
        $query_params->{'filter_search'} = $self->{api_client}->to_query_value($args{'filter_search'});
    }

    # query params
    if ( exists $args{'filter_category'}) {
        $query_params->{'filter_category'} = $self->{api_client}->to_query_value($args{'filter_category'});
    }

    # query params
    if ( exists $args{'filter_import_id'}) {
        $query_params->{'filter_import_id'} = $self->{api_client}->to_query_value($args{'filter_import_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Collectionstring', $response);
    return $_response_object;
}

#
# update_import_job
#
# Update an import job
# 
# @param int $id The id of the job (required)
# @param ImportJobResource $request The updated job (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the job',
        required => '1',
    },
    'request' => {
        data_type => 'ImportJobResource',
        description => 'The updated job',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_import_job' } = { 
    	summary => 'Update an import job',
        params => $params,
        returns => 'ImportJobResource',
        };
}
# @return ImportJobResource
#
sub update_import_job {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_import_job");
    }

    # parse inputs
    my $_resource_path = '/trivia/import/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'request'}) {
        $_body_data = $args{'request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ImportJobResource', $response);
    return $_response_object;
}

#
# update_question
#
# Update a question
# 
# @param string $id The id of the question (required)
# @param QuestionResource $question The updated question (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    'question' => {
        data_type => 'QuestionResource',
        description => 'The updated question',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_question' } = { 
    	summary => 'Update a question',
        params => $params,
        returns => 'QuestionResource',
        };
}
# @return QuestionResource
#
sub update_question {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_question");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'question'}) {
        $_body_data = $args{'question'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QuestionResource', $response);
    return $_response_object;
}

#
# update_question_answer
#
# Update an answer for a question
# 
# @param string $question_id The id of the question (required)
# @param string $id The id of the answer (required)
# @param AnswerResource $answer The updated answer (optional)
{
    my $params = {
    'question_id' => {
        data_type => 'string',
        description => 'The id of the question',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'The id of the answer',
        required => '1',
    },
    'answer' => {
        data_type => 'AnswerResource',
        description => 'The updated answer',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_question_answer' } = { 
    	summary => 'Update an answer for a question',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_question_answer {
    my ($self, %args) = @_;

    # verify the required parameter 'question_id' is set
    unless (exists $args{'question_id'}) {
      croak("Missing the required parameter 'question_id' when calling update_question_answer");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_question_answer");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/{question_id}/answers/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'question_id'}) {
        my $_base_variable = "{" . "question_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'question_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'answer'}) {
        $_body_data = $args{'answer'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_question_template
#
# Update a question template
# 
# @param string $id The id of the template (required)
# @param QuestionTemplateResource $question_template_resource The question template resource object (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'The id of the template',
        required => '1',
    },
    'question_template_resource' => {
        data_type => 'QuestionTemplateResource',
        description => 'The question template resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_question_template' } = { 
    	summary => 'Update a question template',
        params => $params,
        returns => 'QuestionTemplateResource',
        };
}
# @return QuestionTemplateResource
#
sub update_question_template {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_question_template");
    }

    # parse inputs
    my $_resource_path = '/trivia/questions/templates/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'question_template_resource'}) {
        $_body_data = $args{'question_template_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QuestionTemplateResource', $response);
    return $_response_object;
}

#
# update_questions_in_bulk
#
# Bulk update questions
# 
# @param QuestionResource $question New values for a set of question fields (optional)
# @param string $filter_search Filter for documents whose question, answers or tags contains provided string (optional)
# @param string $filter_idset Filter for documents whose id is in the comma separated list provided (optional)
# @param string $filter_category Filter for questions with specified category, by id (optional)
# @param string $filter_tagset Filter for questions with specified tags (separated by comma) (optional)
# @param string $filter_type Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
# @param boolean $filter_published Filter for questions currenctly published or not (optional)
# @param int $filter_import_id Filter for questions from a specific import job (optional)
{
    my $params = {
    'question' => {
        data_type => 'QuestionResource',
        description => 'New values for a set of question fields',
        required => '0',
    },
    'filter_search' => {
        data_type => 'string',
        description => 'Filter for documents whose question, answers or tags contains provided string',
        required => '0',
    },
    'filter_idset' => {
        data_type => 'string',
        description => 'Filter for documents whose id is in the comma separated list provided',
        required => '0',
    },
    'filter_category' => {
        data_type => 'string',
        description => 'Filter for questions with specified category, by id',
        required => '0',
    },
    'filter_tagset' => {
        data_type => 'string',
        description => 'Filter for questions with specified tags (separated by comma)',
        required => '0',
    },
    'filter_type' => {
        data_type => 'string',
        description => 'Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)',
        required => '0',
    },
    'filter_published' => {
        data_type => 'boolean',
        description => 'Filter for questions currenctly published or not',
        required => '0',
    },
    'filter_import_id' => {
        data_type => 'int',
        description => 'Filter for questions from a specific import job',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_questions_in_bulk' } = { 
    	summary => 'Bulk update questions',
        params => $params,
        returns => 'int',
        };
}
# @return int
#
sub update_questions_in_bulk {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/trivia/questions';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_search'}) {
        $query_params->{'filter_search'} = $self->{api_client}->to_query_value($args{'filter_search'});
    }

    # query params
    if ( exists $args{'filter_idset'}) {
        $query_params->{'filter_idset'} = $self->{api_client}->to_query_value($args{'filter_idset'});
    }

    # query params
    if ( exists $args{'filter_category'}) {
        $query_params->{'filter_category'} = $self->{api_client}->to_query_value($args{'filter_category'});
    }

    # query params
    if ( exists $args{'filter_tagset'}) {
        $query_params->{'filter_tagset'} = $self->{api_client}->to_query_value($args{'filter_tagset'});
    }

    # query params
    if ( exists $args{'filter_type'}) {
        $query_params->{'filter_type'} = $self->{api_client}->to_query_value($args{'filter_type'});
    }

    # query params
    if ( exists $args{'filter_published'}) {
        $query_params->{'filter_published'} = $self->{api_client}->to_query_value($args{'filter_published'});
    }

    # query params
    if ( exists $args{'filter_import_id'}) {
        $query_params->{'filter_import_id'} = $self->{api_client}->to_query_value($args{'filter_import_id'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'question'}) {
        $_body_data = $args{'question'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('int', $response);
    return $_response_object;
}

1;
