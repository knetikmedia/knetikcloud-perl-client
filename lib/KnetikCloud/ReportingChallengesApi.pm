=begin comment

Knetik Platform API Documentation latest 

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com

OpenAPI spec version: latest 
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package KnetikCloud::ReportingChallengesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use KnetikCloud::ApiClient;
use KnetikCloud::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => KnetikCloud::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_challenge_event_leaderboard
#
# Retrieve a challenge event leaderboard details
# 
# @param int $filter_event A sepecific challenge event id (optional)
{
    my $params = {
    'filter_event' => {
        data_type => 'int',
        description => 'A sepecific challenge event id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenge_event_leaderboard' } = { 
    	summary => 'Retrieve a challenge event leaderboard details',
        params => $params,
        returns => 'PageResourceChallengeEventParticipantResource',
        };
}
# @return PageResourceChallengeEventParticipantResource
#
sub get_challenge_event_leaderboard {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/reporting/events/leaderboard';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_event'}) {
        $query_params->{'filter_event'} = $self->{api_client}->to_query_value($args{'filter_event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceChallengeEventParticipantResource', $response);
    return $_response_object;
}

#
# get_challenge_event_participants
#
# Retrieve a challenge event participant details
# 
# @param int $filter_event A sepecific challenge event id (optional)
{
    my $params = {
    'filter_event' => {
        data_type => 'int',
        description => 'A sepecific challenge event id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_challenge_event_participants' } = { 
    	summary => 'Retrieve a challenge event participant details',
        params => $params,
        returns => 'PageResourceChallengeEventParticipantResource',
        };
}
# @return PageResourceChallengeEventParticipantResource
#
sub get_challenge_event_participants {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/reporting/events/participants';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'filter_event'}) {
        $query_params->{'filter_event'} = $self->{api_client}->to_query_value($args{'filter_event'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceChallengeEventParticipantResource', $response);
    return $_response_object;
}

1;
