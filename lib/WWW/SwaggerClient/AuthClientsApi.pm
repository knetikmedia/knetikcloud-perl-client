=begin comment

Knetik Platform API Documentation Latest

This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com

OpenAPI spec version: Latest
Contact: support@knetik.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::AuthClientsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# assign_client_grant_types_using_put
#
# Set grant types for a client
# 
# @param string $client_key The key of the client (required)
# @param ARRAY[string] $grant_list A list of unique grant types (optional)
{
    my $params = {
    'client_key' => {
        data_type => 'string',
        description => 'The key of the client',
        required => '1',
    },
    'grant_list' => {
        data_type => 'ARRAY[string]',
        description => 'A list of unique grant types',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'assign_client_grant_types_using_put' } = { 
    	summary => 'Set grant types for a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub assign_client_grant_types_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'client_key' is set
    unless (exists $args{'client_key'}) {
      croak("Missing the required parameter 'client_key' when calling assign_client_grant_types_using_put");
    }

    # parse inputs
    my $_resource_path = '/auth/clients/{client_key}/grant-types';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'client_key'}) {
        my $_base_variable = "{" . "client_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'grant_list'}) {
        $_body_data = $args{'grant_list'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# assign_client_redirect_uris_using_put
#
# Set redirect uris for a client
# 
# @param string $client_key The key of the client (required)
# @param ARRAY[string] $redirect_list A list of unique redirect uris (optional)
{
    my $params = {
    'client_key' => {
        data_type => 'string',
        description => 'The key of the client',
        required => '1',
    },
    'redirect_list' => {
        data_type => 'ARRAY[string]',
        description => 'A list of unique redirect uris',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'assign_client_redirect_uris_using_put' } = { 
    	summary => 'Set redirect uris for a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub assign_client_redirect_uris_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'client_key' is set
    unless (exists $args{'client_key'}) {
      croak("Missing the required parameter 'client_key' when calling assign_client_redirect_uris_using_put");
    }

    # parse inputs
    my $_resource_path = '/auth/clients/{client_key}/redirect-uris';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'client_key'}) {
        my $_base_variable = "{" . "client_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'redirect_list'}) {
        $_body_data = $args{'redirect_list'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_client_using_post
#
# Create a new client
# 
# @param ClientResource $client_resource The client resource object (optional)
{
    my $params = {
    'client_resource' => {
        data_type => 'ClientResource',
        description => 'The client resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_client_using_post' } = { 
    	summary => 'Create a new client',
        params => $params,
        returns => 'ClientResource',
        };
}
# @return ClientResource
#
sub create_client_using_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/auth/clients';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'client_resource'}) {
        $_body_data = $args{'client_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientResource', $response);
    return $_response_object;
}

#
# delete_client_using_delete
#
# Delete a client
# 
# @param string $client_key The key of the client (required)
{
    my $params = {
    'client_key' => {
        data_type => 'string',
        description => 'The key of the client',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_client_using_delete' } = { 
    	summary => 'Delete a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_client_using_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'client_key' is set
    unless (exists $args{'client_key'}) {
      croak("Missing the required parameter 'client_key' when calling delete_client_using_delete");
    }

    # parse inputs
    my $_resource_path = '/auth/clients/{client_key}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'client_key'}) {
        my $_base_variable = "{" . "client_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_client_using_get
#
# Get a single client
# 
# @param string $client_key The key of the client (required)
{
    my $params = {
    'client_key' => {
        data_type => 'string',
        description => 'The key of the client',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_client_using_get' } = { 
    	summary => 'Get a single client',
        params => $params,
        returns => 'ClientResource',
        };
}
# @return ClientResource
#
sub get_client_using_get {
    my ($self, %args) = @_;

    # verify the required parameter 'client_key' is set
    unless (exists $args{'client_key'}) {
      croak("Missing the required parameter 'client_key' when calling get_client_using_get");
    }

    # parse inputs
    my $_resource_path = '/auth/clients/{client_key}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'client_key'}) {
        my $_base_variable = "{" . "client_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClientResource', $response);
    return $_response_object;
}

#
# get_clients_using_get
#
# List and search clients
# 
# @param int $size The number of objects returned per page (optional, default to 25)
# @param int $page The number of the page returned, starting with 1 (optional, default to 1)
# @param string $order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
{
    my $params = {
    'size' => {
        data_type => 'int',
        description => 'The number of objects returned per page',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The number of the page returned, starting with 1',
        required => '0',
    },
    'order' => {
        data_type => 'string',
        description => 'A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_clients_using_get' } = { 
    	summary => 'List and search clients',
        params => $params,
        returns => 'PageResourceClientResource',
        };
}
# @return PageResourceClientResource
#
sub get_clients_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/auth/clients';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'size'}) {
        $query_params->{'size'} = $self->{api_client}->to_query_value($args{'size'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PageResourceClientResource', $response);
    return $_response_object;
}

#
# list_available_grant_types_using_get
#
# List available client grant types
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'list_available_grant_types_using_get' } = { 
    	summary => 'List available client grant types',
        params => $params,
        returns => 'ARRAY[GrantTypeResource]',
        };
}
# @return ARRAY[GrantTypeResource]
#
sub list_available_grant_types_using_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/auth/clients/grant-types';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GrantTypeResource]', $response);
    return $_response_object;
}

#
# update_client_using_put
#
# Update a client
# 
# @param string $client_key The key of the client (required)
# @param ClientResource $client_resource The client resource object (optional)
{
    my $params = {
    'client_key' => {
        data_type => 'string',
        description => 'The key of the client',
        required => '1',
    },
    'client_resource' => {
        data_type => 'ClientResource',
        description => 'The client resource object',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_client_using_put' } = { 
    	summary => 'Update a client',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_client_using_put {
    my ($self, %args) = @_;

    # verify the required parameter 'client_key' is set
    unless (exists $args{'client_key'}) {
      croak("Missing the required parameter 'client_key' when calling update_client_using_put");
    }

    # parse inputs
    my $_resource_path = '/auth/clients/{client_key}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'client_key'}) {
        my $_base_variable = "{" . "client_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'client_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'client_resource'}) {
        $_body_data = $args{'client_resource'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(OAuth2 )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
